* Set emacs theme
  #+begin_src emacs-lisp
    ;; leuven-theme
    ;; gruvbox-theme
    ;; material-theme
    ;; flucui-themes
    ;; solarized-theme
    ;; kaolin-themes with kaolin-galaxy
    ;; monokai-Theme

    (use-package kaolin-themes
      :ensure t
      :config
      (progn
	(load-theme 'kaolin-galaxy t)
	(set-face-attribute 'show-paren-match nil :weight 'extra-bold)))
  #+end_src

  #+RESULTS:
  : t

* Interface tweaks
** set font
   * Install Monaco font in Ubuntu:
     * check [[https://github.com/cstrap/monaco-font][How To]].
     * ~./install-font-ubuntu.sh http://www.gringod.com/wp-upload/software/Fonts/Monaco_Linux.ttf~
     * ~./install-font-ubuntu.sh http://www.gringod.com/wp-upload/software/Fonts/Monaco_Linux.ttf~
     * ~mkdir ~/.fonts~
     * ~cp Monaco_Linux.ttf ~/.fonts/~
   * [[http://ergoemacs.org/emacs/emacs_list_and_set_font.html][how to find the current font used]]
   * [[http://ergoemacs.org/emacs/emacs_unicode_fonts.html][best unicode fonts for programmer]]
   #+begin_src emacs-lisp
     ;; to adjust font dynamically
     ;; C-xC-+ and C-xC-- to increase or decrease the buffer text size
     (cond
      ((string-equal system-type "windows-nt")
       (set-default-font "Consolas 10"))
      ((string-equal system-type "gnu/linux")
       (set-default-font "Monaco 12"))
      ((string-equal system-type "darwin")
       (if (member "DejaVu Sans Mono" (font-family-list))
	   (set-default-font "DejaVu Sans Mono 11")
	 (set-default-font "Menlo 11"))))
   #+end_src

   #+RESULTS:

** alight commands
   #+BEGIN_SRC emacs-lisp
     (add-hook 'align-load-hook #'(lambda ()
				    (add-to-list 'align-rules-list
						 '(text-column-whitespace
						   (regexp  . "\\(^\\|\\S-\\)\\([ \t]+\\)")
						   (group   . 2)
						   (modes   . align-text-modes)
						   (repeat  . t)))))
   #+END_SRC

   #+RESULTS:

** adjust meta key
   #+BEGIN_SRC emacs-lisp
     ;;; I prefer cmd key for meta
     (setq mac-option-key-is-meta nil
	   mac-command-key-is-meta t
	   mac-command-modifier 'meta
	   mac-option-modifier 'none)
   #+END_SRC

   #+RESULTS:
   : none

** set global key-bindings
   Use "C-h k" to check the meaning of command for which the current key-binding belongs to in current mode.
   #+begin_src emacs-lisp
     ;; use cmd + n and cmd + p to select next and previous lines
     (global-set-key (kbd "s-n") (kbd "C-S-n"))
     (global-set-key (kbd "s-p") (kbd "C-S-p"))
     ;; use c-z to undo
     (global-set-key (kbd "C-z") #'undo)

     ;; do code comment 
     (global-set-key (kbd "C-/") 'comment-or-uncomment-region)

     ;; use c-c c-c to execute a lisp function
     (global-set-key (kbd "C-c C-c") 'eval-last-sexp)

     ;; use f3 to use org-edit-special
     (global-set-key (kbd "<f3>") (kbd "C-c '"))
     ;; use f10 to format whole buffer
     (global-set-key (kbd "<f10>") (progn
				     #'mark-whole-buffer
				     #'indent-region))
     ;; use f5 to revert the buffer
     (global-set-key (kbd "<f5>") 'revert-buffer)
   #+end_src

   #+RESULTS:
   : revert-buffer

** set buffer and shell
   #+begin_src emacs-lisp
     ;; no need for prompt for confirm when execute code block in org-mode
     (setq org-confirm-babel-evaluate nil)

     ;; make sure environment variables inside Emacs look the same as in the user's shell
     (use-package exec-path-from-shell
       :ensure t
       :config
       (progn
         (when (memq window-system '(mac ns x))
           (exec-path-from-shell-initialize))))
   #+end_src

   #+RESULTS:
   : t

** set line number
   #+BEGIN_SRC emacs-lisp
     (use-package nlinum
       :ensure t
       :config
       (progn
	 (global-nlinum-mode t)
	 ;; Preset `nlinum-format' for minimum width.
	 (defun my-nlinum-mode-hook ()
	   (when nlinum-mode
	     (setq-local nlinum-format
			 (concat "%" (number-to-string
				      ;; Guesstimate number of buffer lines.
				      (ceiling (log (max 1 (/ (buffer-size) 80)) 10)))
				 "d"))))
	 (add-hook 'nlinum-mode-hook #'my-nlinum-mode-hook)

	 ;; [[https://www.emacswiki.org/emacs/LineNumbers][solve bug with emacs daemon mode]]
	 (defun initialize-nlinum (&optional frame)
	   (require 'nlinum)
	   (add-hook 'prog-mode-hook 'nlinum-mode))
	 (when (daemonp)
	   (add-hook 'window-setup-hook 'initialize-nlinum)
	   (defadvice make-frame (around toggle-nlinum-mode compile activate)
	     (nlinum-mode -1) ad-do-it (nlinum-mode 1)))))
   #+END_SRC

   #+RESULTS:
   : t

** use y-or-n 
   #+begin_src emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)

   #+end_src

   #+RESULTS:
   : y-or-n-p

** set adaptive-wrap
   #+BEGIN_SRC emacs-lisp
     (use-package adaptive-wrap
       :ensure t
       :config
       (progn
	 ;; (setq-default adaptive-wrap-extra-indent 2)
	 (global-visual-line-mode t)
	 (add-hook 'visual-line-mode-hook #'adaptive-wrap-prefix-mode)))
   #+END_SRC

   #+RESULTS:
   : t

** set scroll screen
   #+begin_src emacs-lisp
     (setq scroll-step 1)
     (setq scroll-margin 1)
     (setq scroll-conservatively 100000)
   #+end_src

   #+RESULTS:
   : 100000

** change the cursor type and color
   #+begin_src emacs-lisp
     ;;(setq-default cursor-type '(hbar . 2))
     (setq-default cursor-type '(bar . 2))
   #+end_src

   #+RESULTS:

** highlight current line
   #+begin_src emacs-lisp
     (global-hl-line-mode +1)
   #+end_src 

   #+RESULTS:
   : t

** use indent-guide
   #+begin_src emacs-lisp
     ;; (use-package indent-guide
     ;;   :ensure t
     ;;   :config
     ;;   (progn
     ;;     (indent-guide-global-mode)))
   #+end_src 

   #+RESULTS:
   : t

** highlight-indentation
   #+BEGIN_SRC emacs-lisp
     (use-package highlight-indentation
       :ensure t
       :config
       (progn
	 ;; (setq highlight-indentation-blank-lines t)
	 ;; define a global minor mode
	 (define-globalized-minor-mode my-global-highlight-indentation-mode highlight-indentation-mode
	   (lambda ()
	     (highlight-indentation-mode 1)))

	 (my-global-highlight-indentation-mode 1)))
   #+END_SRC

   #+RESULTS:
   : t

** which-key
   #+begin_src emacs-lisp
     (use-package which-key
       :defer 2
       :ensure t
       :config (which-key-mode))
   #+end_src

** try
   #+begin_src emacs-lisp
     (use-package try
       :defer 2
       :ensure t)
   #+end_src

** set trump-mode
   #+begin_src emacs-lisp
     (setq tramp-default-method "ssh")
   #+end_src

   #+RESULTS:
   : ssh

* Swiper/Ivy/Counsel
  Swiper gives us a really efficient incremental search with regular expressions and Ivy / Counsel replace a lot of ido or helms completion functionality
  #+begin_src emacs-lisp
    ;; it looks like counsel is a requirement for swiper
    (use-package counsel
      :defer 1
      :ensure t
      :bind
      (("M-y" . counsel-yank-pop)
       :map ivy-minibuffer-map
       ("M-y" . ivy-next-line)))

    (use-package ivy
      :defer 1
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "%d/%d ")
      (setq ivy-display-style 'fancy))


    (use-package swiper
      :defer 1
      :ensure try
      :bind (("C-s" . swiper)
	     ("C-c C-r" . ivy-resume)
	     ("M-x" . counsel-M-x)
	     ("C-x C-f" . counsel-find-file))
      :config
      (progn
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-display-style 'fancy)
	(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
  #+end_src
  
* Keep parentheses balanced
** Paredit
   #+begin_src emacs-lisp
     (use-package paredit
       :defer 1
       :ensure t
       :init
       (progn
	 (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
	 ;; (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
	 ;; (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
	 ;; (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
	 ;; ;; (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
	 ;; (add-hook 'sly-mode-hook             #'enable-paredit-mode)
	 ;; (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
	 ;; (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
	 ;; (add-hook 'racket-mode-hook           #'enable-paredit-mode)

	 ;; paredit with eldoc
	 ;; (require 'eldoc) 
	 ;; (eldoc-add-command
	 ;;  'paredit-backward-delete
	 ;;  'paredit-close-round)

	 ;; paredit with electric return
	 (defvar electrify-return-match
	   "[\]}\)\"]"
	   "If this regexp matches the text after the cursor, do an \"electric\"
       return.")
	 (defun electrify-return-if-match (arg)
	   "If the text after the cursor matches `electrify-return-match' then
       open and indent an empty line between the cursor and the text.  Move the
       cursor to the new line."
	   (interactive "P")
	   (let ((case-fold-search nil))
	     (if (looking-at electrify-return-match)
		 (save-excursion (newline-and-indent)))
	     (newline arg)
	     (indent-according-to-mode)))
	 ;; Using local-set-key in a mode-hook is a better idea.
	 (global-set-key (kbd "RET") 'electrify-return-if-match)))
   #+end_src
** complements to paredit
   #+begin_src emacs-lisp
     ;; Show matching arenthesis
     (show-paren-mode 1)
     (setq show-paren-delay 0)

     (require 'paren)
     (set-face-background 'show-paren-match (face-background 'default))
   #+end_src

   #+RESULTS:


** smartparens
   [[https://github.com/Fuco1/smartparens][smartparens]] is an excellent (newer) alternative to paredit. Many Clojure hackers have adopted it recently and you might want to give it a try as well.
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :ensure t
       :config
       (progn
	 (add-hook 'js-mode-hook #'smartparens-mode)
	 (add-hook 'typescript-mode-hook #'smartparens)
	 (add-hook 'c-mode-hook #'smartparens-mode)
	 (add-hook 'c++-mode-hook #'smartparens-mode)
	 (add-hook 'web-mode-hook #'smartparens-mode)))
   #+END_SRC

   #+RESULTS:
   : t

* Helm
  #+BEGIN_SRC emacs-lisp
    (use-package helm
      :ensure t
      :config
      (progn
	(use-package helm-xref
	  :ensure t)

	;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
	;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
	;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
	(global-set-key (kbd "C-c h") 'helm-command-prefix)
	(global-unset-key (kbd "C-x c"))

	;; C-x C-f runs the command counsel-find-file
	(global-unset-key (kbd "C-x C-f"))
	(global-set-key (kbd "C-x C-f") #'helm-find-files)

	(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
	(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
	(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

	(when (executable-find "curl")
	  (setq helm-google-suggest-use-curl-p t))

	(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
	      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
	      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
	      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
	      helm-ff-file-name-history-use-recentf t
	      helm-echo-input-in-header-line t

	      ;; optional fuzzy matching for helm-M-x
	      helm-M-x-fuzzy-match t
	      helm-buffers-fuzzy-matching t
	      helm-recentf-fuzzy-match t

	      ;; TOOD: helm-semantic has not syntax coloring! How can I fix that?
	      helm-semantic-fuzzy-match t
	      helm-imenu-fuzzy-match t)

	(setq xref-show-xrefs-function 'helm-xref-show-xrefs)

	(defun spacemacs//helm-hide-minibuffer-maybe ()
	  "Hide minibuffer in Helm session if we use the header line as input field."
	  (when (with-helm-buffer helm-echo-input-in-header-line)
	    (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
	      (overlay-put ov 'window (selected-window))
	      (overlay-put ov 'face
			   (let ((bg-color (face-background 'default nil)))
			     `(:background ,bg-color :foreground ,bg-color)))
	      (setq-local cursor-type nil))))

	(add-hook 'helm-minibuffer-set-up-hook
		  'spacemacs//helm-hide-minibuffer-maybe)

	(setq helm-autoresize-max-height 0)
	(setq helm-autoresize-min-height 20)
	(helm-autoresize-mode 1)
	(helm-mode 1)))
  #+END_SRC

  #+RESULTS:
  : t
* Projectile
  #+begin_src emacs-lisp
    (use-package projectile
      :ensure t
      :bind ("C-c p" . projectile-command-map)
      :config
      (progn
	(projectile-global-mode)
	(setq projectile-completion-system 'helm)

	(use-package helm-projectile
	  :ensure t
	  :config
	  (helm-projectile-on))))
  #+end_src

  #+RESULTS:
  : projectile-command-map

* Company
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :defer t
      :ensure t
      :config
      (progn
	(add-hook 'after-init-hook 'global-company-mode)

	(setq completion-ignore-case t)
	(setq company-dabbrev-downcase nil)
	;; Show suggestions after entering one character.
	(setq company-minimum-prefix-length 1)
	;; wrap around to the top of the list again
	(setq company-selection-wrap-around t)
	(setq company-echo-delay 0.01)
	(setq company-idle-delay 0.01)

	(define-key company-active-map [tab] 'company-complete-selection)
	;; (define-key company-active-map (kbd "<tab>") 'company-complete-selection)
	(define-key company-active-map (kbd "C-n") 'company-select-next)
	(define-key company-active-map (kbd "C-p") 'company-select-previous)

	;; company-capf, company-dabbrev and company-files are very useful. So, adjust default backends
	(defvar company-default-backends '(company-bbdb company-eclim company-semantic company-clang company-xcode company-cmake company-capf company-files
							(company-dabbrev-code company-gtags company-etags company-keywords)
							company-oddmuse company-dabbrev))    
	(defvar company-my-backends '(company-capf company-files company-dabbrev company-semantic
						   (company-dabbrev-code company-gtags company-etags company-keywords)
						   company-oddmuse company-dabbrev))
	(setq company-backends company-my-backends)

	;; use statistics to better filter completion candidates
	(use-package company-statistics
	  :ensure t
	  :config
	  (progn
	    (add-hook 'company-mode-hook #'company-statistics-mode)
	    (setq company-transformers '(company-sort-by-statistics
					 company-sort-by-backend-importance))))

	(use-package company-posframe
	  :ensure t
	  :config
	  (progn
	    (add-hook 'company-mode #'company-posframe-mode)))

	(use-package company-quickhelp
	  :ensure t
	  :config
	  (progn
	    (setq company-quickhelp-delay 0.5)
	    (add-hook 'company-mode #'company-quickhelp-mode)))

	(use-package company-tabnine
	  :ensure t
	  :config
	  (progn
	    (add-to-list 'company-backends #'company-tabnine)))
	))
  #+END_SRC

  #+RESULTS:
  : t

* Rainbow-delimiters
  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
      :ensure t
      :config
      (progn
        ;; (add-hook 'lisp-mode-hook #'rainbow-delimiters-mode)
        (add-hook 'sly-mode-hook #'rainbow-delimiters-mode)
        (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)))
  #+END_SRC

  #+RESULTS:
  : t

* Ace-window
  #+begin_src emacs-lisp
    (use-package ace-window
      :defer 2
      :ensure t
      :init
      :config
      (progn
	(setq aw-scope 'frame)
	(global-set-key (kbd "C-x O") 'other-frame)
	(global-set-key [remap other-window] 'ace-window)
	(custom-set-faces
	 '(aw-leading-char-face
	   ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
  #+end_src

  #+RESULTS:
  : t

* Magit
  #+begin_src emacs-lisp
    (use-package magit
      :ensure t)
  #+end_src

  #+RESULTS:

** configuration for smerge-mode
   #+begin_src emacs-lisp
     (setq smerge-command-prefix "\C-cv")
   #+end_src

   #+RESULTS:
   : v
   
* Treemacs
  #+begin_src emacs-lisp
    (use-package treemacs
      :defer t
      :ensure t
      :defer t
      :init
      (progn
	(use-package lv
	  :ensure t)
	(use-package hydra
	  :ensure t)
	(with-eval-after-load 'winum
	  (define-key winum-keymap (kbd "M-0") #'treemacs-select-window)))
      :config
      (progn
	;; (pcase (cons (not (null (executable-find "git")))
	;;              (not (null (executable-find "python3"))))
	;;   (`(t . t)
	;;    (treemacs-git-mode 'deferred))
	;;   (`(t . _)
	;;    (treemacs-git-mode 'simple)))
	(setq treemacs-collapse-dirs              (if (executable-find "python") 3 0)
	      treemacs-file-event-delay           5000
	      treemacs-follow-after-init          t
	      treemacs-follow-recenter-distance   0.1
	      treemacs-goto-tag-strategy          'refetch-index
	      treemacs-indentation                1
	      ;; indent guide
	      treemacs-indentation-string (propertize " | " 'face 'font-lock-comment-face)
	      ;; treemacs-indentation-string         "|"
	      treemacs-is-never-other-window      nil
	      treemacs-no-png-images              nil
	      treemacs-project-follow-cleanup     nil
	      treemacs-recenter-after-file-follow nil
	      treemacs-recenter-after-tag-follow  nil
	      treemacs-show-hidden-files          t
	      treemacs-silent-filewatch           nil
	      treemacs-silent-refresh             nil
	      treemacs-sorting                    'alphabetic-desc
	      treemacs-tag-follow-cleanup         t
	      treemacs-tag-follow-delay           1.5
	      treemacs-width                      40
	      treemacs-follow-mode                t
	      treemacs-filewatch-mode             t
	      treemacs-git-mode nil))
      :bind
      (:map global-map
	    ([f8]        . treemacs)
	    ("M-0"       . treemacs-select-window)
	    ("C-x t 1"   . treemacs-delete-other-windows)
	    ("C-x t t"   . treemacs)
	    ("C-x t B"   . treemacs-bookmark)
	    ("C-x t C-t" . treemacs-find-file)
	    ("C-x t M-t" . treemacs-find-tag)))

    (use-package treemacs-evil
      :defer t
      :after treemacs evil
      :ensure t)

    (use-package treemacs-projectile
      :defer t
      :after treemacs projectile
      :ensure t)

    (use-package treemacs-icons-dired
      :defer t
      :after treemacs dired
      :ensure t
      :config (treemacs-icons-dired-mode))


  #+end_src

  #+RESULTS:

* Lisp Programming
** Eldoc to show argument list
   #+begin_src emacs-lisp
     (use-package eldoc
       :defer t
       :ensure t
       :init
       :config
       (progn
	 (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
	 (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
	 ;; highlight eldoc arguments in emacslisp
	 (defun eldoc-get-arg-index ()
	   (save-excursion
	     (let ((fn (eldoc-fnsym-in-current-sexp))
		   (i 0))
	       (unless (memq (char-syntax (char-before)) '(32 39)) ; ? , ?'
		 (condition-case err
		     (backward-sexp)             ;for safety
		   (error 1)))
	       (condition-case err
		   (while (not (equal fn (eldoc-current-symbol)))
		     (setq i (1+ i))
		     (backward-sexp))
		 (error 1))
	       (max 0 i))))

	 (defun eldoc-highlight-nth-arg (doc n)
	   (cond ((null doc) "")
		 ((<= n 0) doc)
		 (t
		  (let ((i 0))
		    (mapconcat
		     (lambda (arg)
		       (if (member arg '("&optional" "&rest"))
			   arg
			 (prog2
			     (if (= i n)
				 (put-text-property 0 (length arg) 'face 'underline arg))
			     arg
			   (setq i (1+ i)))))
		     (split-string doc) " ")))))

	 (defadvice eldoc-get-fnsym-args-string (around highlight activate)
	   ""
	   (setq ad-return-value (eldoc-highlight-nth-arg ad-do-it
							  (eldoc-get-arg-index))))))
   #+end_src

   #+RESULTS:
   : t

** Common-lisp
   #+begin_src emacs-lisp
     (use-package sly
       :ensure t
       :config
       (progn
	 (setq inferior-lisp-program "sbcl")
	 (setq sly-lisp-implementations
	       '((sbcl ("/usr/local/bin/sbcl") :coding-system utf-8-unix)
		 ))
	 ;; (setq inferior-lisp-program "clisp"
	 ;; 	  exec-path (append exec-path
	 ;;                         '("/usr/local/bin")))
	 ))

   #+end_src

   #+RESULTS:
   : t

** Racket
   #+begin_src emacs-lisp
     (use-package racket-mode
       :mode "\\.racket\\'"
       :ensure t
       :config
       (progn
	 (if (string-equal system-type "windows-nt")
	     (setq racket-program "c:/Program Files/Racket/Racket.exe")
	   (setq racket-program "/Applications/Racket_v7.0/bin/racket"))
	 (add-hook 'racket-mode-hook
		   (lambda ()
		     (define-key racket-mode-map (kbd "C-c r") 'racket-run)))
	 (setq tab-always-indent 'complete)
	 (add-hook 'racket-mode-hook      #'racket-unicode-input-method-enable)
	 (add-hook 'racket-repl-mode-hook #'racket-unicode-input-method-enable)

	 ;; setup file ending in ".scheme" to open in racket-mode 
	 (add-to-list 'auto-mode-alist '("\\.racket\\'" . racket-mode))))
   #+end_src

   #+RESULTS:
   : t

** Scheme
   #+begin_src emacs-lisp
     (use-package geiser
       :ensure t
       :config
       (progn
	 ;; append exec-path to include scheme
	 (if (eq system-type 'windows-nt)
	     (setq exec-path (append exec-path '("c:/Program Files (x86)/Chez Scheme 9.5/bin/ti3nt")))
	   nil)

	 ;; modify the Chez executable name both for scheme-mode and Geiser 
	 (setq scheme-program-name "scheme")
	 (setq geiser-chez-binary "scheme")
	 (setq geiser-mode-start-repl-p t)
	 (setq geiser-active-implementations '(chez guile racket))
	 (add-to-list 'auto-mode-alist '("\\.ss\\'" . scheme-mode))
	 (add-hook 'scheme-mode-hook
		   #'(lambda ()
		       (geiser-mode--maybe-activate)))))
   #+end_src

   #+RESULTS:
   : t

** Clojure programming
*** CIDER
    It is the Clojure(Script) Interactive Development Environment.
    #+BEGIN_SRC emacs-lisp
      (use-package cider
	:ensure t
	:config
	(progn
	  (setq cider-jack-in-default 'lein)
	  (if (string-equal system-type "windows-nt")
	      (add-to-list 'exec-path "c:/ProgramData/chocolatey/bin/")
	    nil)
	  (add-hook 'cider-repl-mode-hook #'enable-paredit-mode)
	  (add-hook 'cider-repl-mode-hook #'subword-mode)
	  (add-hook 'cider-repl-mode-hook #'rainbow-delimiters-mode)
	  (use-package helm-cider
	    :ensure t
	    :config
	    (progn
	      (add-hook 'cider-repl-mode-hook #'helm-cider-mode)))))
    #+END_SRC

    #+RESULTS:
    : t
    - Troubleshooting: Could not start nREPL server: java.io.IOException: Permission denied.
      Solution: check the ~/.lein folder's permission, use chown to change it.
   
*** Clojure-mode
    #+BEGIN_SRC emacs-lisp
      (use-package clojure-mode
	:ensure t
	:config
	(progn
	  (setq clojure-align-forms-automatically t)
    
	  ;; set how code indent for some forms
	  (define-clojure-indent
	    (implement '(1 (1)))
	    (letfn     '(1 ((:defn)) nil))
	    (proxy     '(2 nil nil (1)))
	    (reify     '(:defn (1)))
	    (deftype   '(2 nil nil (1)))
	    (defrecord '(2 nil nil (1)))
	    (specify   '(1 (1)))
	    (or 1))

	  ;; make moving between characters faster
	  (add-hook 'clojure-mode-hook #'subword-mode)
	  ;; use paredit or smartparens 
	  (add-hook 'clojure-mode-hook #'enable-paredit-mode)
	  (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
	  (add-hook 'clojure-mode-hook #'aggressive-indent-mode)))

    #+END_SRC

    #+RESULTS:
    : t

*** Org-babel-clojure configuration
    #+begin_src emacs-lisp
      (setq org-babel-clojure-backend 'cider)
    #+end_src

    #+RESULTS:
    : cider

*** adoc-mode for reading [[https://github.com/clojure-cookbook/clojure-cookbook][Clojure Cookbook]]   
    #+begin_src emacs-lisp
     (use-package adoc-mode
       :ensure t
       :config
       (progn
	 (defun increment-clojure-cookbook ()
	   "When reading the Clojure cookbook, find the next section, and
     close the buffer. If the next section is a sub-directory or in
     the next chapter, open Dired so you can find it manually."
	   (interactive)
	   (let* ((cur (buffer-name))
		  (split-cur (split-string cur "[-_]"))
		  (chap (car split-cur))
		  (rec (car (cdr split-cur)))
		  (rec-num (string-to-number rec))
		  (next-rec-num (1+ rec-num))
		  (next-rec-s (number-to-string next-rec-num))
		  (next-rec (if (< next-rec-num 10)
				(concat "0" next-rec-s)
			      next-rec-s))
		  (target (file-name-completion (concat chap "-" next-rec) "")))
	     (progn 
	       (if (equal target nil)
		   (dired (file-name-directory (buffer-file-name)))
		 (find-file target))
	       (kill-buffer cur))))
	 (define-key adoc-mode-map (kbd "M-+") 'increment-clojure-cookbook)
    
	 (add-to-list 'auto-mode-alist (cons "\\.txt\\'" 'adoc-mode))
	 (add-to-list 'auto-mode-alist (cons "\\.asciidoc\\'" 'adoc-mode))
	 (add-hook 'adoc-mode-hook 'cider-mode)))

    #+end_src

    #+RESULTS:
    : t

*** Userful key-bindings in Clojure programming
    - C-c C-d C-d will display documentation for the symbol under point, which can be a huge time-saver.
    - M-. will navigate to the source code for the symbol under point
    - M-, will return you to your original buffer and position
    - C-c C-d C-a lets you search for arbitrary text across function names and documentation
    - For paredit
      - M-( Surround expression after point in parentheses (paredit-wrap-round).
      - C-<left or right arrow>, surp or barf
      - C-M-f, C-M-b Move to the opening/closing parenthesis.

** Common configuration 
   #+begin_src emacs-lisp
     ;; define additional minor mode to adjust keybindings without conflicts
     (defvar my-lisp-power-map (make-keymap))
     (define-minor-mode my-lisp-power-mode "Fix keybindings; add power."
       :lighter " (power)"
       :keymap my-lisp-power-map)
     (define-key my-lisp-power-map [delete] 'paredit-forward-delete)
     (define-key my-lisp-power-map [backspace] 'paredit-backward-delete)

     ;; define a group of common features needed by all lisp programming
     (defun zwpdbh/enhance-lisp-power ()
       (interactive)
       (my-lisp-power-mode t)
       (turn-on-eldoc-mode)
       (paredit-mode t)
       (rainbow-delimiters-mode-enable)
       (aggressive-indent-mode t))
     ;; define a group of different lisp modes, so we could apply features on on them 
     (setq my-lisp-mode-set '(lisp-mode
			      lisp-interaction-mode
			      emacs-lisp-mode
			      ielm-mode
			      eval-expression-minibuffer-setup
			      common-lisp-mode
			      racket-mode
			      racket-repl-mode
			      scheme-mode
			      clojure-mode
			      geiser-repl-mode))
     (dolist (each-mode my-lisp-mode-set)
       (add-hook (intern (format "%s-hook" each-mode))
		 #'zwpdbh/enhance-lisp-power))
   #+end_src


* Other Programming
** Common features
*** Flycheck
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
	:defer 2
	:ensure t)
    #+END_SRC

    #+RESULTS:
    | flycheck-yamllint-setup | flycheck-mode-set-explicitly |

*** Lsp
    [[https://github.com/emacs-lsp/lsp-mode][see lsp-mode]]
    #+begin_src emacs-lisp
      (use-package lsp-mode
	:init
	(require 'lsp-clients)
	:ensure t
	:config
	(progn
	  (setq lsp-message-project-root-warning t)

	  ;; change nil to 't to enable logging of packets between emacs and the LS
	  ;; this was invaluable for debugging communication with the MS Python Language Server
	  ;; and comparing this with what vs.code is doing
	  (setq lsp-print-io nil)

	  (use-package lsp-ui
	    :ensure t
	    :config
	    (progn
	      (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
	      (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
	      (setq lsp-ui-imenu-enable t)
	      (setq lsp-ui-sideline-ignore-duplicate t)
	      (setq lsp-ui-sideline-enable nil)
	      (setq lsp-ui-doc-enable nil)
	      (add-hook 'lsp-mode-hook 'lsp-ui-mode)))

	  (use-package company-lsp
	    :ensure t
	    :config
	    (progn
	      (setq company-lsp-cache-candidates nil)
	      (setq company-lsp-async t)
	      (setq company-lsp-enable-recompletion t)))

	  ;; make multiple source to do completion even in lsp-mode
	  ;; (defun reset-company-backends-with-lsp () 
	  ;;   (interactive)
	  ;;   (setq company-backends (cons (cons 'company-lsp (car company-general-backends)) (cdr company-general-backends))))

	  (defun my-setup-lsp ()
	    "set the completion backends after lsp called, since it will simply push company-lsp at the beginning of the company-backends"
	    (lsp))

	  (defmacro lsp-register-major-mode (client mode)
	    "Registers major MODE to CLIENT. \(fn 'example-ls 'example-mode)"
	    (gv-letplace (getter setter) `(lsp--client-major-modes (gethash ,client lsp-clients))
	      `(unless (memq ,mode ,getter)
		 (funcall ,setter (push ,mode ,getter)))))

	  (use-package helm-lsp :commands helm-lsp-workspace-symbol)
	  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)


	  (use-package dap-mode
	    :ensure t
	    :config
	    (progn
	      (dap-mode 1)
	      (dap-ui-mode 1)))))
    #+end_src

    #+RESULTS:
    : t

*** Clang format
    !!! Do not forget to install clang-format: =sudo apt install clang-format=.
    #+begin_src emacs-lisp
      (use-package clang-format
	:ensure t
	:config
	(progn
	  (defun clang-format-buffer-smart ()
	    "Reformat buffer if .clang-format exists in the projectile root."
	    (when (f-exists? (expand-file-name ".clang-format" (projectile-project-root)))
	      (clang-format-buffer)))

	  (dolist (each-hook '(c-mode-hook c++-mode-hook js-mode-hook))
	    (add-hook each-hook #'(lambda ()
				    (add-hook 'before-save-hook #'clang-format-buffer-smart nil 'local))))

	  ;; disable clang-format in json-mode
	  (use-package json-mode
	    :ensure t
	    :config
	    (progn
	      (add-hook 'json-mode-hook #'(lambda ()
					    (remove-hook 'before-save-hook #'clang-format-buffer-smart 'local)
					    (add-hook 'before-save-hook #'json-mode-beautify nil 'local)))))

	  (use-package yaml-mode
	    :ensure t
	    :config
	    (progn
	      (add-hook 'yaml-mode-hook #'(lambda ()
					    (remove-hook 'before-save-hook #'clang-format-buffer-smart 'local)
					    (add-hook 'before-save-hook #'newline-and-indent nil 'local)))))))


    #+end_src

    #+RESULTS:
    : t

*** yasnippet
    #+begin_src emacs-lisp
      (use-package yasnippet
	:ensure t
	:diminish yas-minor-mode
	:config (yas-global-mode t))
    #+end_src

    #+RESULTS:
    : t

*** Aggressive-indent-mode
    #+BEGIN_SRC emacs-lisp
      (use-package aggressive-indent
	:ensure t
	:config
	(progn
	  ;; active it for specific mode
	  (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
	  (add-hook 'scheme-mode-hook #'aggressive-indent-mode)
	  ;; deactive it for specific mode
	  (add-to-list 'aggressive-indent-excluded-modes 'html-mode)))
    #+END_SRC

    #+RESULTS:
    : t

*** expand-region
    #+begin_src emacs-lisp
      (use-package expand-region
	:ensure t
	:config
	(progn
	  (global-set-key (kbd "C-=") 'er/expand-region)
	  (global-set-key (kbd "C--") 'er/contract-region)))
    #+end_src

    #+RESULTS:
    : t



** Scala programming
*** ensime
    #+begin_src emacs-lisp
      (use-package ensime
	:mode "\\.scala\\'"
	:init 
	(if (string-equal system-type "windows-nt")
	    (progn
	      (setq exec-path (append exec-path '("c:/Program Files (x86)/scala/bin")))
	      (setq exec-path (append exec-path '("c:/Program Files (x86)/sbt/bin"))))
	  (setq exec-path (append exec-path '("/usr/local/bin"))))
	:ensure t
	:config
	(progn
	  ;; (add-hook 'scala-mode-hook 'ensime-scala-mode-hook)
	  (add-hook 'scala-mode-hook 'ensime-mode)))
    #+end_src

    #+RESULTS:
    : t
    
** Python development
*** with lsp 
    - References
      - [[https://vxlabs.com/2018/11/19/configuring-emacs-lsp-mode-and-microsofts-visual-studio-code-python-language-server/][Configuring Emacs, lsp-mode and Microsoft's Visual Studio Code Python language server.]] (using)
    - Components
      - server: Microsoft Python Language Server
      - client: lsp-python-ms
      - installation
	- install [[https://dotnet.microsoft.com/download][dotnet-sdk]]
	  - [[https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current][installation on ubuntu18.04]]
	- clone and install [[https://github.com/Microsoft/python-language-server][python-language-server]]
    - Configuration with emacs
      #+begin_src emacs-lisp

	(use-package lsp-python-ms
	  :ensure t
	  :config
	  (progn
	    ;; for dev build of language server
	    (setq lsp-python-ms-dir
		  (expand-file-name "~/python-language-server/output/bin/Release/"))

	    (setq python-shell-interpreter "python3")
	    (add-hook 'python-mode-hook #'my-setup-lsp)
	    (add-hook 'python-mode-hook #'smartparens-mode)))

      #+end_src

      #+RESULTS:
      : t


   
*** Debugging
    Debugg using pdb
    #+BEGIN_SRC python
      # import ipd
      # ipdb.set_trace ()
    #+END_SRC

*** Test Integration
    Configure your test Runner
    M-x elpy-set-test-runner
    C-c C-t  ;; runs test/ all tests

** C/C++ programming
*** with lsp
    - Components
      - install clang: =sudo apt install clang=
      - install clangd: [[https://clang.llvm.org/extra/clangd/Installation.html#installing-clangd][Getting started with clangd]]
      - Configuration with emacs
	#+begin_src emacs-lisp
	  (use-package cquery
	    :init
	    (progn
	      (setq cquery-extra-init-params '(:completion (:detailedLabel t))))
	    :ensure t
	    :config
	    (progn
	      (setq cquery-executable "/usr/local/bin/cquery")
    
	      (defun cquery//enable ()
		(condition-case nil
		    (lsp)
		  (user-error nil)))
	      (add-hook 'c-mode-hook #'cquery//enable)
	      (add-hook 'c++-mode-hook #'cquery//enable)))
	#+end_src

	#+RESULTS:
	: t

*** CMakeLists
    #+begin_src emacs-lisp
      (use-package cmake-mode
	:ensure t
	:config
	(progn
	  (add-hook 'cmake-mode-hook #'(lambda ()
					 (smartparens-mode +1)))))
    #+end_src

    #+RESULTS:
    : t


** web programming
*** interface
    #+begin_src emacs-lisp
      (setq js-indent-level 2)
      (setq typescript-indent-level 2)
    #+end_src

    #+RESULTS:
    : 2
*** javascript with company-flow
    * install [[https://github.com/facebook/flow][flow]]
    * flow-based autocomplete for emacs with [[https://github.com/aaronjensen/company-flow][company-flow]]
      #+begin_src emacs-lisp
	(use-package company-flow
	  :ensure t
	  :config
	  (progn
	    ;; For best performance, you can set this to the actual flow binary in your project.
	    (defun flow/set-flow-executable ()
	      (interactive)
	      (let* ((os (pcase system-type
			   ('darwin "osx")
			   ('gnu/linux "linux64")
			   (_ nil)))
		     (root (locate-dominating-file  buffer-file-name  "node_modules/flow-bin"))
		     (executable (car (file-expand-wildcards
				       (concat root "node_modules/flow-bin/*" os "*/flow")))))
		(setq-local company-flow-executable executable)
		;; These are not necessary for this package, but a good idea if you use
		;; these other packages
		(setq-local flow-minor-default-binary executable)
		(setq-local flycheck-javascript-flow-executable executable)
		(setq-local company-backends (add-to-list 'company-backends #'company-flow))))
	    ;; invoke company-flow for certain mode
	    (add-hook 'js-mode-hook #'flow/set-flow-executable t)))
      #+end_src
      
*** web-mode for vue.js 
   #+BEGIN_SRC emacs-lisp
     (defun my/web-vue-setup()
       "Setup for js related."
       (message "web-mode use vue related setup")
       (require 'company-css)
       (setq-local company-backends (append '(company-web-html company-css) company-backends))
       ;; (setup-tide-mode)
       ;; (prettier-js-mode)
       (flycheck-add-mode 'javascript-eslint 'web-mode)
       (flycheck-select-checker 'javascript-eslint)
       (my/use-eslint-from-node-modules))

     (use-package web-mode
       :ensure t
       :mode ("\\.html\\'" "\\.vue\\'")
       :config
       (setq web-mode-markup-indent-offset 2)
       (setq web-mode-css-indent-offset 2)
       (setq web-mode-code-indent-offset 2)
       (setq web-mode-enable-current-element-highlight t)
       (setq web-mode-enable-css-colorization t)
       (set-face-attribute 'web-mode-html-tag-face nil :foreground "royalblue")
       (set-face-attribute 'web-mode-html-attr-name-face nil :foreground "powderblue")
       (set-face-attribute 'web-mode-doctype-face nil :foreground "lightskyblue")
       (setq web-mode-content-types-alist
	     '(("vue" . "\\.vue\\'")))
       (use-package company-web
	 :ensure t)
       (add-hook 'web-mode-hook (lambda()
				  (cond ((equal web-mode-content-type "html")
					 (my/web-html-setup))
					((member web-mode-content-type '("vue"))
					 (my/web-vue-setup))))))


     (defun my/use-eslint-from-node-modules ()
       "Use local eslint from node_modules before global."
       (let* ((root (locate-dominating-file
		     (or (buffer-file-name) default-directory)
		     "node_modules"))
	      (eslint (and root
			   (expand-file-name "node_modules/eslint/bin/eslint.js"
					     root))))
	 (when (and eslint (file-executable-p eslint))
	   (setq-local flycheck-javascript-eslint-executable eslint))))
     (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
   #+END_SRC

   #+RESULTS:
   | my/use-eslint-from-node-modules | flycheck-yamllint-setup | flycheck-mode-set-explicitly |


** go programming
   * [[https://www.digitalocean.com/community/tutorials/how-to-install-go-on-ubuntu-18-04][How To Install Go on Ubuntu 18.04]]
   * go-mode with ob-go
     #+begin_src emacs-lisp
       (use-package go-mode
	 :ensure t
	 :config
	 (progn
	   (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))
	   (if (string-equal system-type "gnu/linux")
	       (add-to-list 'exec-path "/usr/local/go/bin")
	     nil)
    
	   (use-package ob-go
	     :ensure t
	     :config
	     (add-to-list 'org-structure-template-alist '("go" . "src go"))
	     (org-babel-do-load-languages
	      'org-babel-load-languages
	      '((go . t))))))
     #+end_src

     #+RESULTS:
   * Test go example
     #+begin_src go :imports "fmt"
       fmt.Println("Hello, 世界")
     #+end_src

     #+RESULTS:
     : Hello, 世界


** Java programming
   [[http://www.goldsborough.me/emacs,/java/2016/02/24/22-54-16-setting_up_emacs_for_java_development/][blog shows how to setup emacs for java development]]

** R programming
*** configuration 
    #+begin_src emacs-lisp
      ;; (unless (string-equal system-type "gnu/linux")
      ;;   ;; current there is error when tring to use R in Ubuntu 18.04
      ;;   ;; It shows could not load ess package and crush other packages
      ;;   (use-package ess
      ;;     :ensure t
      ;;     :init (require 'ess-site)
      ;;     :config
      ;;     (progn
      ;;       (setq inferior-R-program-name "/usr/local/bin/R"
      ;; 	    comint-input-ring-size 1000
      ;; 	    ess-indent-level 4
      ;; 	    ess-arg-function-offset 4
      ;; 	    ess-else-offset 4
      ;; 	    ess-continued-statement-offset 2
      ;; 	    truncate-lines t
      ;; 	    comment-column 4)		;

      ;;       (use-package electric-spacing
      ;; 	:ensure t)

      ;;       (add-hook 'ess-mode-hook 
      ;; 		#'(lambda () 
      ;; 		    (electric-spacing-mode))))))

      (use-package ess
	:ensure t
	:init (require 'ess-site)
	:config
	(progn
	  (setq inferior-R-program-name "/usr/local/bin/R"
		comint-input-ring-size 1000
		ess-indent-level 4
		ess-arg-function-offset 4
		ess-else-offset 4
		ess-continued-statement-offset 2
		truncate-lines t
		comment-column 4)		;

	  (use-package electric-spacing
	    :ensure t)

	  (add-hook 'ess-mode-hook 
		    #'(lambda () 
			(electric-spacing-mode)))))
    #+end_src

    #+RESULTS:
    : t

*** references
    - [[https://jmonlong.github.io/Hippocamplus/emacs/#for-r]]

* Org mode enhancement
** common settings
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :ensure org-plus-contrib)
     (require 'ob)
     (require 'ob-js)
     (require 'org-eldoc)
     (require 'org-tempo)

     ;; To bind a key in a mode, you need to wait for the mode to be loaded before defining the key.
     (eval-after-load 'org
       #'(lambda ()
	   ;; (define-key org-mode-map [f9] #'org-global-cycle) use shift + tab
	   (define-key org-mode-map [f9] #'org-toggle-inline-images)))

     (define-key global-map "\C-cl" 'org-store-link)
     (define-key global-map "\C-ca" 'org-agenda)
     (setq org-log-done t)
   #+END_SRC

   #+RESULTS:
   : t

** org-agenda-files
   In case some org files is not listed in agenda files, run the code block again to refresh the file list.
   Another way is to invoke the function ~org-agenda-file-to-front~.
   #+begin_src emacs-lisp
     ;; make org-agenda to search all the TODOs recursively for files .org in folder "~/code/org/"
     (setq org-agenda-files (directory-files-recursively "~/code/org/" "\\.org$"))
   #+end_src

   #+RESULTS:
   | /home/zw/code/org/kubernetes/use-kubernetes-api.org | /home/zw/code/org/blog-creation.org | /home/zw/code/org/chez-scheme.org | /home/zw/code/org/clojure.org | /home/zw/code/org/emacs.org | /home/zw/code/org/home.org | /home/zw/code/org/learning_statistics_using_R.org | /home/zw/code/org/personal.org | /home/zw/code/org/work.org |

** make code-block could be executed in org-mode
   #+begin_src emacs-lisp
     ;; evaluation use sly instead of using slime, need to use org-plus-contrib
     (setq org-babel-lisp-eval-fn #'sly-eval)
     (use-package ob-http
       :ensure t)

     (org-babel-do-load-languages
      'org-babel-load-languages
      '((lisp . t)
	(clojure . t)
	(scheme . t)
	(C . t)
	(shell . t)
	(js . t)
	(python . t)
	(R . t)
	(http . t)
	(latex . t)
	(dot . t)
	(plantuml . t)))

     (add-hook 'org-mode-hook #'(lambda ()
				  (progn
				    ;; all languages needed to be confirmed to execute except emacs-lisp and lisp
				    (defun my-org-confirm-babel-evaluate (lang body)
				      (not (member lang '("emacs-lisp" "lisp" "scheme" "clojure" "python" "R" "C" "latex" "dot" "plantuml"))))
				    (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate))))

     (eval-after-load 'org
       #'(lambda ()
	   (progn
	     (add-to-list 'org-structure-template-alist '("py3" . "src python3"))
	     (add-to-list 'org-structure-template-alist '("py" . "src python"))
	     (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
	     (add-to-list 'org-structure-template-alist '("lisp" . "src lisp"))
	     (add-to-list 'org-structure-template-alist '("scheme" . "src scheme"))
	     (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
	     (add-to-list 'org-structure-template-alist '("clojure" . "src clojure"))
	     (add-to-list 'org-structure-template-alist '("r" . "src R"))
	     (add-to-list 'org-structure-template-alist '("js" . "src js"))
	     (add-to-list 'org-structure-template-alist '("http" . "src http"))
	     (add-to-list 'org-structure-template-alist '("lt" . "LaTeX"))
	     (add-to-list 'org-structure-template-alist '("dot" . "src dot"))
	     (add-to-list 'org-structure-template-alist '("uml" . "src plantuml")))))
   #+end_src


** Publishing Org-mode files to HTML
   #+begin_src emacs-lisp
     (use-package htmlize
       :defer 2
       :ensure t)

     ;; publish the ~/code/org/ project to HTML
     (require 'ox-publish)
     (setq org-publish-project-alist
	   '(;; the netes components, it publishes all the org-mode files to HTML 
	     ("org-notes"
	      :base-directory "~/code/org/"
	      :base-extension "org"
	      :publishing-directory "~/code/public_html/"
	      :recursive t
	      :publishing-function org-html-publish-to-html
	      :headline-levels 4
	      :auto-preamble t
	      :auto-sitemap t                  
	      :sitemap-filename "sitemap.org"  
	      :sitemap-title "Sitemap")
	     ("org-static"
	      :base-directory "~/code/org/"
	      :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
	      :publishing-directory "~/public_html/"
	      :recursive t
	      :publishing-function org-publish-attachment)
	     ("org" :components ("org-notes" "org-static"))
	
	     ("hugo-notes"
	      :base-directory "~/code/org/"
	      :base-extension "org"
	      :publishing-directory "~/code/my-site/content-org/"
	      :recursive t)))

   #+end_src

   #+RESULTS:

** Hugo + ox-hugo + Netlify
*** ox-hugo
    #+begin_src emacs-lisp
     (use-package ox-hugo
       :ensure t            ;Auto-install the package from Melpa (optional)
       :after ox)
    #+end_src

*** org-capture
    * create corresponding .org file within the org folder inside HUGO site
    * each note/post will be inserted into the corresponding org file under second level headline (the first level is the corresponding file headline)
    * edit config/menus.toml, create link to section
    * edit content/home/<corresponding url name>.md, use computer-science.md as example:
      * line 3: # This section displays recent blog posts from `content/computer-science/`.
      * title = "Computer Science Posts"
      * line 15: page_type = "computer-science"
    * Note: need to mark the second level headline status as DONE to make it be visiable and searchable after being published.
    
    configuration for ~org-capture~
    #+begin_src emacs-lisp
      (defun org-hugo-new-subtree-post-capture-template ()
	"Returns `org-capture' template string for new Hugo post.
      See `org-capture-templates' for more information."
	(let* (;; http://www.holgerschurig.de/en/emacs-blog-from-org-to-hugo/
	       (date (format-time-string (org-time-stamp-format  :inactive) (org-current-time)))
	       (title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
	       (fname (org-hugo-slug title)))
	  (mapconcat #'identity
		     `(
		       ,(concat "* TODO " title)
		       ":PROPERTIES:"
		       ,(concat ":EXPORT_FILE_NAME: " fname)
		       ,(concat ":EXPORT_DATE: " date) ;Enter current date and time
		       ,(concat ":EXPORT_HUGO_CUSTOM_FRONT_MATTER+: "  ":foo bar :baz zoo :alpha 1 :beta \"two words\" :gamma 10" )
		       ":END:"
		       "%?\n")          ;Place th
		     "\n")))

      (setq org-capture-templates
	    '(
	      ("t" "todo" entry (file "~/code/my-site/content-org/todo.org")
	       "* TODO %? :TODO: \n Added:%T\n"
	       :clock-in t :clock-resume t)

	      ("h" "Hugo post")

	      ("hc" "Computer-Science"
	       entry (file+olp "~/code/my-site/content-org/computer-science.org" "Computer-Science")
	       (function org-hugo-new-subtree-post-capture-template)
	       :clock-in t :clock-resume t)

	      ("hm" "Mathematics"
	       entry (file+olp "~/code/my-site/content-org/mathematics.org" "Mathematics")
	       (function org-hugo-new-subtree-post-capture-template)
	       :clock-in t :clock-resume t)

	      ("hs" "Software-Engineering"
	       entry (file+olp "~/code/my-site/content-org/software-engineering.org" "Software-Engineering")
	       (function org-hugo-new-subtree-post-capture-template)
	       :clock-in t :clock-resume t)

	      ("ht" "Tools"
	       entry (file+olp "~/code/my-site/content-org/tools.org" "Tools")
	       (function org-hugo-new-subtree-post-capture-template)
	       :clock-in t :clock-resume t)))
    #+end_src

    #+RESULTS:
    | t | todo | entry | (file ~/code/my-site/org/todo.org) | * TODO %? :TODO: |

** Set the background of org-exported <code> blocks according to theme
   #+begin_src emacs-lisp
     (defun my/org-inline-css-hook (exporter)
       "Insert custom inline css to automatically set the
     background of code to whatever theme I'm using's background"
       (when (eq exporter 'html)
	 (let* ((my-pre-bg (face-background 'default))
		(my-pre-fg (face-foreground 'default)))
	   (setq
	    org-html-head-extra
	    (concat
	     org-html-head-extra
	     (format "<style type=\"text/css\">\n pre.src {background-color: %s; color: %s;}</style>\n"
		     my-pre-bg my-pre-fg))))))

     (add-hook 'org-export-before-processing-hook 'my/org-inline-css-hook)
   #+end_src

   #+RESULTS:
   | my/org-inline-css-hook |

** Github Flavored Markdown
   #+begin_src emacs-lisp
     (use-package ox-gfm
       :ensure t
       :config
       (progn
	 (eval-after-load "org"
	   '(require 'ox-gfm nil t))))
   #+end_src

** Capture screenshot within Emacs
   #+begin_src emacs-lisp
     (use-package org-attach-screenshot
       :ensure t
       :config
       (progn
	 (setq org-attach-screenshot-dirfunction
	       (lambda () 
		 (progn (assert (buffer-file-name))
			(concat (file-name-sans-extension (buffer-file-name))
				"_att")))
	       org-attach-screenshot-relative-links t)))
   #+end_src

** Org-download moving images from A to B
   #+begin_src emacs-lisp
     (use-package org-download
       :defer t
       :ensure t)
   #+end_src

   #+RESULTS:

** graphviz
   #+begin_src emacs-lisp
     (use-package graphviz-dot-mode
       :ensure t)
   #+end_src

   #+RESULTS:

** plantuml
   #+begin_src emacs-lisp
     (use-package plantuml-mode
       :ensure t
       :init
       :config
       (progn
	 (setq org-plantuml-jar-path "~/.emacs.d/plantuml.jar")
	 (setq plantuml-jar-path "~/.emacs.d/plantuml.jar")
	 (setq plantuml-exec-mode 'jar)
	 ;; (setq plantuml-java-options "")
	 (setq plantuml-default-exec-mode "jar")
	 (plantuml-set-exec-mode "jar")
	 (setq plantuml-output-type "svg")

	 (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
	 (add-hook 'plantuml-mode-hook #'(lambda ()
					   (progn
					     (plantuml-init-once "jar")
					     (plantuml-init "jar"))))))
   #+end_src

   #+RESULTS:
   : t

* Markdown 
  - sudo apt install pandoc
  #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode
      :ensure t
      :commands (markdown-mode gfm-mode)
      :mode (("README\\.md\\'" . gfm-mode)
	     ("\\.md\\'" . markdown-mode)
	     ("\\.markdown\\'" . markdown-mode))
      :init (setq markdown-command "multimarkdown"))
  #+END_SRC

  #+RESULTS:

* Docker
  #+begin_src emacs-lisp
    ;; reference usage from http://manuel-uberti.github.io/emacs/2017/10/19/docker/
    (use-package dockerfile-mode
      :ensure t
      :config
      (progn
	(add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
	(setq dockerfile-mode-command "docker")))

    (use-package docker-compose-mode
      :ensure t)

    (use-package docker-tramp
      ;; C-x C-f /docker:user@container:/path/to/file, where:
      ;; user is the user that you want to use
      ;; container is the id or name of the container 
      ;; :defer t
      :ensure t)

    (use-package eshell-bookmark
      :defer
      :after eshell
      :config 
      (add-hook 'eshell-mode-hook #'eshell-bookmark-setup))
  #+end_src

  #+RESULTS:

* PDF 
  Use [[https://github.com/politza/pdf-tools][pdf-tools]], read the documentation to install dependencies according to your system.
  #+begin_src emacs-lisp
    (setq exec-path (append exec-path '("/usr/local/bin")))

    (when (string-equal system-type "darwin")
      ;; Haven't build pdf-tool dependencies on other system
      (use-package pdf-tools
	;; :pin manual
	:init
	(use-package tablist
	  :ensure t)
	:ensure t
	:config
	;; initialise
	(pdf-tools-install)
	;; PDF Tools does not work well together with linum-mode
	(add-hook 'pdf-view-mode-hook (lambda() (nlinum-mode -1)))
	;; more fine-grained zooming
	;; (setq pdf-view-resize-factor 1.1)
	;; open pdfs scaled to fit page
	(setq-default pdf-view-display-size 'fit-width)
	;; automatically annotate highlights
	(setq pdf-annot-activate-created-annotations t)

	;; use normal isearch
	(define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))

      (use-package org-pdfview
	:ensure t))

  #+end_src

  #+RESULTS:

  * If meet error: "dyld: Library not loaded: /usr/local/opt/mpfr/lib/libmpfr.4.dylib Referenced from: /usr/local/bin/gawk" during the compliation of pdf-tools.
    Solution: ~brew upgrade gawk~

* Latex
  * Reference
    * [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-LaTeX.html][LaTex Source Code Blocks in Org Mode]]
    * [[http://www.stat.rice.edu/~helpdesk/compguide/node39.html][Latex/Emacs tex mode]]
  * Configuration
    #+begin_src emacs-lisp
      (use-package company-math
	:ensure t)
      ;; local configuration for TeX modes
      (defun my-latex-mode-setup ()
	(setq-local company-backends
		    (append '((company-math-symbols-latex company-latex-commands))
			    company-backends)))


      (setq exec-path (append exec-path '("/Library/TeX/texbin/")))
      (add-hook 'LaTex-mode-hook (lambda ()
				   (turn-on-reftex)
				   (my-latex-mode-setup)))
    #+end_src


* TODO Lookup word definition
  (see [[https://oremacs.com/2015/05/22/define-word/][New on MELPA - define word at point]])
* References
** Good general configurations
   - [[https://ladicle.com/post/config/][Ladicle's Emacs Configuration]]
   - [[http://aaronbedra.com/emacs.d/][Aaron Bedra's Emacs 26 Configuration]]
   - [[https://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's Emacs configuration]]
   - [[https://github.com/CSRaghunandan/.emacs.d/tree/master/setup-files][a different way to organize configuration files]]
   - [[https://github.com/jerryhsieh/Emacs-config][jerryhsieh/Emacs-config]]
   - [[https://justin.abrah.ms/dotfiles/emacs.html][Justin Abrahms]]
   - [[https://heychenbin.github.io/post/emacs_config/#scheme][Chenbin's Emacs Configuration]]
** C/C++ related
   - [[http://syamajala.github.io/c-ide.html][Emacs as C++ IDE]] 
   - [[http://martinsosic.com/development/emacs/2017/12/09/emacs-cpp-ide.html#configuration][Emacs as a C++ IDE]]
   - https://ddavis.io/
   - [[http://maskray.me/blog/2017-12-03-c++-language-server-cquery][使用cquery：C++ language server]]
** Python related
   - [[https://vxlabs.com/2018/06/08/python-language-server-with-emacs-and-lsp-mode/][Configuring Emacs, lsp-mode and the python language server]]
** Good Blogs related to emacs
   - [[http://blog.binchen.org/index.html][about many emacs articles]]
   - [[https://www.cnblogs.com/holbrook/tag/emacs/][emacs notes from a cnblogs]]

** Use emacs to create blog sites
   - [[https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html][Publishing org-mode files to HTML]]
*** Examples of website created from Emacs's org-mode 
    - [[https://stackoverflow.com/questions/12052013/beautiful-websites-using-emacss-org-mode][beatiful websites using Emacs's org mode]]
    - [[http://alexott.net/en/writings/EmacsMuseMyPage.html][How this site was created]]
    - [[https://orgmode.org/worg/org-web.html][Web pages made with org-mode]]

*** [[https://orgmode.org/worg/org-blog-wiki.html][Different staitc site generators with org]] 

*** Org-mode to GitHub pages with Jekyll
    - [[http://cute-jumper.github.io/emacs/2013/10/06/orgmode-to-github-pages-with-jekyll][Org-mode to GitHub pages with Jekyll]]
      - [[https://orgmode.org/worg/org-tutorials/org-jekyll.html][Using org to Blog with Jekyl]]
      - [[https://github.com/masasam/emacs-easy-jekyll][easy-jekyll]]
*** Org file to blog using: [[https://gohugo.io/][Hugo]], [[https://github.com/kaushalmodi/ox-hugo][ox-hugo]] and [[https://www.netlify.com/][Netlify]]
    - [[https://www.zcl.space/tools/my-blog-workflow/][Blogging with Emcas Org]]
    - [[https://rakhim.org/2018/09/moved-from-jekyll-to-hugo-and-ox-hugo/][Moved from Jekyll to Hugo and ox-hugo]]
    - [[https://www.shanesveller.com/blog/2018/02/13/blogging-with-org-mode-and-ox-hugo/][Blogging with org-mode and ox-hugo]]


** Org-mode related
   - [[http://www.i3s.unice.fr/~malapert/org/tips/emacs_orgmode.html][a very good example how to set org-mode: Another Org-Mode Configuration]]
   - [[http://jr0cket.co.uk/2013/08/defining-custom-workflow-with-Emacs-org-mode.html.html][Defining Custom Task Workflows With Emacs Org-Mode]]
   - [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][Beautifying Org Mode in Emacs]]
   - [[http://ehneilsen.net/notebook/orgExamples/org-examples.html][Emacs org-mode examples and cookbook]]

** Knowledge from Shane
*** tools
    - ix.io
      - [[http://aboumrad.info/faster-pastes-with-ix-io.html][Faster pastes with ix.io]]
      - [[https://github.com/theanalyst/ix.el][emacs client for ix.io]]
    - [[https://asciinema.org/][Record and share your terminal sessions, the right way.]]

*** library
    - [[https://github.com/github/semantic][Semantic]] is a Haskell library and command line tool for parsing, analyzing, and comparing source code.

*** emancs 
    - python debugging
      - ~from IPython import embed; embed()~
      - "gud gdb" is great for debugging, a very nice debugging system that works for many languages. anything that supports gdb

*** video
    - [[https://www.youtube.com/watch?v=6mTbuzafcII&fbclid=IwAR00MiTM7EZhvC5ew0DMxDSKoO7fyCJWzNOD9-ONkxBELCuwAqnjCU-ujmI][Transducers]]

* Troubleshooting
** Emacs on Mac use ESC as Meta key
   if somethings the Meta key is "ESC", to the following to make it become "alt"
   Terminal->Preference->Profile->Your current using profile->Keyboard
   Make sure "Use Option as Meta key" is selected
** Emacs on Mac's version
   By default Emacs is installed on Mac, but it has a very old version. To install a latest emacs on mac, two ways:
   * Use [[https://emacsformacosx.com][Emacs on mac]]. 
   * Use [[https://stackoverflow.com/questions/44092539/how-can-i-install-emacs-correctly-on-os-x][~brew cask install emacs~]]
** UI
   * ~C-x C--~ or ~C-x C-=~ make font small or larger
** Org
*** "TODO" items
    * TODO items are always headlines
    * org options
      #+begin_src org
	,#+SEQ_TODO: TODO ON_HOLD PROCESSING WAITING | DONE ABANDONED
	,#+TAGS: emacs k8s clojure statistics mathematics network js
      #+end_src
      * The first "," is added automatically by this org code block
      * Use ~C-c C-c~ to run the options

    * ~shift  + tab~ to collapse headline and show it in a cycle way
    * ~shift + left~ or ~shift + right~  to shift a headline's TODO status
    * ~shift + up~ or ~shift + downe~ to cycle through priority states of a TODO item.
    * ~C-c C-q~ to give headline a tag and that tag could be autocompleted through the tags you defined in the org file.
    * Use "[ ]" in front of a item, and use "[0/0]" in front of headline, and run ~C-c C-c~ inside "[0/0]" it will mark how many todo has been done.

*** If you find Org-Mode Evaluation of code is disabled, do:
    ~find ~/.emacs.d/elpa/org* -name "*elc" -delete~

*** When try to use "<" invoke Org-mode template expansions
    Error:org-try-structure-completion: Wrong type argument: listp, "src emacs-lisp"
    <el

** AGENDA
   * ~C-c a t~ to enter the global todo list. The Org-mode will scan the files configured in *org-agenda-files* and present a listing of all the open TODO items
     - hit ~t~ to mark an item done
     - hit ~RET~ to jump to the source file wehre the TODO is located
   * Scheduling tasks and using the agenda
     - Go to the next line under a TODO item, ~C-c C-s~ to insert a scheduled date
       Then, you could use Shift + arrow key to move the schedule date in the calendar.
     - ~C-c a~ list availabe commands related with agenda
** Hyper Links 
   * link aonther org file into current org mode
   * Go to the file you want to link, then ~C-c l~ to store the link to mark the position in the file
   * Go back to the file you are editing, ~C-c C-l~ to insert the file linkxs


