*Interface tweaks
** set key-bindings
   #+begin_src emacs-lisp
     ;; use cmd + n and cmd + p to select next and previous lines
     (global-set-key (kbd "s-n") (kbd "C-S-n"))
     (global-set-key (kbd "s-p") (kbd "C-S-p"))

     ;; use cmd + / to comment region of code
     (global-set-key (kbd "s-/") 'comment-region)
     ;; use cmd + \ to uncomment region of code
     (global-set-key (kbd "s-\\") 'uncomment-region)

     ;; use c-c c-c to execute a function in scheme
     (global-set-key (kbd "C-c C-c") 'eval-last-sexp)

     ;; use f4 to format whole buffer
     (global-set-key (kbd "<f10>") (kbd "C-x h C-M-\\"))
     ;; use f3 to use org-edit-special
     (global-set-key (kbd "<f3>") (kbd "C-c '"))
     ;; use f5 to revert the buffer
     (global-set-key (kbd "<f5>") 'revert-buffer)
     ;; use f6 to toggle the display of inline image
     (global-set-key (kbd "<f6>") (kbd "C-c C-x C-v")) 
   #+end_src

** set buffer and shell
   #+begin_src emacs-lisp
     ;; no need for prompt for confirm when execute code block in org-mode
     (setq org-confirm-babel-evaluate nil)

     ;; make sure environment variables inside Emacs look the same as in the user's shell
     (use-package exec-path-from-shell
       :ensure t
       :config
       (progn
	 (when (memq window-system '(mac ns x))
	   (exec-path-from-shell-initialize))))
   #+end_src

   #+RESULTS:
   : t

** change the cursor type and color
   #+begin_src emacs-lisp
     (setq-default cursor-type '(hbar . 2))
   #+end_src

   #+RESULTS:
   : (hbar . 2)
** highlight current line
   #+begin_src emacs-lisp
     (global-hl-line-mode +1)
   #+end_src 

   #+RESULTS:
   : t

** use indent-guide
   #+begin_src emacs-lisp
     (use-package indent-guide
       :ensure t
       :config
       (indent-guide-global-mode))
   #+end_src 

   #+RESULTS:
   : t

** which-key
   #+begin_src emacs-lisp
     (use-package which-key
       :ensure t
       :config (which-key-mode))
   #+end_src
** try
   #+begin_src emacs-lisp
     (use-package try
       :ensure t)
   #+end_src
* Swiper/Ivy/Counsel
  Swiper gives us a really efficient incremental search with regular expressions and Ivy / Counsel replace a lot of ido or helms completion functionality
  #+begin_src emacs-lisp
    ;; it looks like counsel is a requirement for swiper
    (use-package counsel
      :ensure t
      :bind
      (("M-y" . counsel-yank-pop)
       :map ivy-minibuffer-map
       ("M-y" . ivy-next-line)))

    (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "%d/%d ")
      (setq ivy-display-style 'fancy))


    (use-package swiper
      :ensure try
      :bind (("C-s" . swiper)
	     ("C-r" . swiper)
	     ("C-c C-r" . ivy-resume)
	     ("M-x" . counsel-M-x)
	     ("C-x C-f" . counsel-find-file))
      :config
      (progn
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-display-style 'fancy)
	(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
  #+end_src
  
* Keep parentheses balanced
** Paredit
   #+begin_src emacs-lisp
     (use-package paredit
       :ensure t
       :init
       (progn
         (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
         (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
         (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
         (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
         (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
         (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
         (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
         (add-hook 'racket-mode-hook           #'enable-paredit-mode)

         ;; paredit with eldoc
         (require 'eldoc) ; if not already loaded
         (eldoc-add-command
          'paredit-backward-delete
          'paredit-close-round)

         ;; paredit with slime repl
         (add-hook 'slime-repl-mode-hook (lambda () (paredit-mode +1)))
         ;; To alleviate the annoying habit of grabbing DEL in slime's REPL
         ;; Stop SLIME's REPL from grabbing DEL,
         ;; which is annoying when backspacing over a '('
         (defun override-slime-repl-bindings-with-paredit ()
           (define-key slime-repl-mode-map
             (read-kbd-macro paredit-backward-delete-key) nil))
         (add-hook 'slime-repl-mode-hook 'override-slime-repl-bindings-with-paredit)

         ;; paredit with electric return
         (defvar electrify-return-match
           "[\]}\)\"]"
           "If this regexp matches the text after the cursor, do an \"electric\"
       return.")
         (defun electrify-return-if-match (arg)
           "If the text after the cursor matches `electrify-return-match' then
       open and indent an empty line between the cursor and the text.  Move the
       cursor to the new line."
           (interactive "P")
           (let ((case-fold-search nil))
             (if (looking-at electrify-return-match)
                 (save-excursion (newline-and-indent)))
             (newline arg)
             (indent-according-to-mode)))
         ;; Using local-set-key in a mode-hook is a better idea.
         (global-set-key (kbd "RET") 'electrify-return-if-match)))
   #+end_src
** complements to paredit
   #+begin_src emacs-lisp
     ;; Show matching arenthesis
     (show-paren-mode 1)
     (setq show-paren-delay 0)

     (require 'paren)
     (set-face-background 'show-paren-match (face-background 'default))
     ;; highlight matched parenthesis
     (set-face-foreground 'show-paren-match "red")
     (set-face-attribute 'show-paren-match nil :weight 'extra-bold)
   #+end_src

   #+RESULTS:
* AutoComplete
  #+begin_src emacs-lisp
    (use-package auto-complete 
      :ensure t
      :init
      :config
      (progn
	(ac-config-default)
	(add-hook 'after-init-hook 'global-auto-complete-mode t)
	;; ingore case during completion
	(setq completion-ignore-case t)))
  #+end_src

  #+RESULTS:
  : t

* Ace-window
  #+begin_src emacs-lisp
    (use-package ace-window
      :ensure t
      :init
      :config
      (progn
	(setq aw-scope 'frame)
	(global-set-key (kbd "C-x O") 'other-frame)
	(global-set-key [remap other-window] 'ace-window)
	(custom-set-faces
	 '(aw-leading-char-face
	   ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
  #+end_src

  #+RESULTS:
  : t
* Set emacs theme
  #+begin_src emacs-lisp
    (use-package material-theme
      :ensure t
      :config
      (progn
	(load-theme 'material-light t)))
  #+end_src

  #+RESULTS:
  : t
* Org mode enhancement
** make code-block could be executed in org-mode
   #+begin_src emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '(
	(lisp . t)
	(shell . t)
	;; (R . t)
	(C . t)
	(plantuml . t)))
   #+end_src

   #+RESULTS:
* Lisp programming configuration
** eldoc to show argument list
   #+begin_src emacs-lisp
     (use-package eldoc
       :ensure t
       :init
       :config
       (progn
	 (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
	 (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
	 (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
	 ;; highlight eldoc arguments in emacslisp
	 (defun eldoc-get-arg-index ()
	   (save-excursion
	     (let ((fn (eldoc-fnsym-in-current-sexp))
		   (i 0))
	       (unless (memq (char-syntax (char-before)) '(32 39)) ; ? , ?'
		 (condition-case err
		     (backward-sexp)             ;for safety
		   (error 1)))
	       (condition-case err
		   (while (not (equal fn (eldoc-current-symbol)))
		     (setq i (1+ i))
		     (backward-sexp))
		 (error 1))
	       (max 0 i))))

	 (defun eldoc-highlight-nth-arg (doc n)
	   (cond ((null doc) "")
		 ((<= n 0) doc)
		 (t
		  (let ((i 0))
		    (mapconcat
		     (lambda (arg)
		       (if (member arg '("&optional" "&rest"))
			   arg
			 (prog2
			     (if (= i n)
				 (put-text-property 0 (length arg) 'face 'underline arg))
			     arg
			   (setq i (1+ i)))))
		     (split-string doc) " ")))))

	 (defadvice eldoc-get-fnsym-args-string (around highlight activate)
	   ""
	   (setq ad-return-value (eldoc-highlight-nth-arg ad-do-it
							  (eldoc-get-arg-index))))))
   #+end_src

   #+RESULTS:
   : t
* Scala programming
** ensime
   #+begin_src emacs-lisp
     (use-package ensime
       :init 
       (cond
	((string-equal system-type "darwin")
	 (progn
	   (setq exec-path (append exec-path '("/usr/local/bin"))))))
       :ensure t
       :config
       (progn
	 (add-hook 'scala-mode-hook 'ensime-scala-mode-hook)))


   #+end_src

   #+RESULTS:
   : t




