* Interface tweaks
** alight commands
   #+BEGIN_SRC emacs-lisp
     (add-hook 'align-load-hook #'(lambda ()
				    (add-to-list 'align-rules-list
						 '(text-column-whitespace
						   (regexp  . "\\(^\\|\\S-\\)\\([ \t]+\\)")
						   (group   . 2)
						   (modes   . align-text-modes)
						   (repeat  . t)))))
   #+END_SRC

   #+RESULTS:


** set font
   - Install Monaco font in Ubuntu:
     - check [[https://github.com/cstrap/monaco-font][How To]].
     - ~./install-font-ubuntu.sh http://www.gringod.com/wp-upload/software/Fonts/Monaco_Linux.ttf~
     - ~./install-font-ubuntu.sh http://www.gringod.com/wp-upload/software/Fonts/Monaco_Linux.ttf~
     - ~mkdir ~/.fonts~
     - ~cp Monaco_Linux.ttf ~/.fonts/~
   #+begin_src emacs-lisp
     ;; to adjust font dynamically
     ;; C-xC-+ and C-xC-- to increase or decrease the buffer text size
     (cond
      ((string-equal system-type "windows-nt")
       (set-default-font "Consolas 10"))
      ((string-equal system-type "gnu/linux")
       (set-default-font "Monaco 10")))
   #+end_src

   #+RESULTS:

** set global key-bindings
   Use "C-h k" to check the meaning of command for which the current key-binding belongs to in current mode.
   #+begin_src emacs-lisp
     ;; use cmd + n and cmd + p to select next and previous lines
     (global-set-key (kbd "s-n") (kbd "C-S-n"))
     (global-set-key (kbd "s-p") (kbd "C-S-p"))
     ;; use c-z to undo
     (global-set-key (kbd "C-z") #'undo)

     ;; use cmd + / to comment region of code
     (global-set-key (kbd "s-/") 'comment-region)
     ;; use cmd + \ to uncomment region of code
     (global-set-key (kbd "s-\\") 'uncomment-region)

     ;; use c-c c-c to execute a lisp function
     (global-set-key (kbd "C-c C-c") 'eval-last-sexp)

     ;; use f3 to use org-edit-special
     (global-set-key (kbd "<f3>") (kbd "C-c '"))
     ;; use f10 to format whole buffer
     (global-set-key (kbd "<f10>") (progn
                                     #'mark-whole-buffer
                                     #'indent-region))
     ;; use f5 to revert the buffer
     (global-set-key (kbd "<f5>") 'revert-buffer)
   #+end_src

   #+RESULTS:
   : 

** set buffer and shell
   #+begin_src emacs-lisp
     ;; no need for prompt for confirm when execute code block in org-mode
     (setq org-confirm-babel-evaluate nil)

     ;; make sure environment variables inside Emacs look the same as in the user's shell
     (use-package exec-path-from-shell
       :ensure t
       :config
       (progn
         (when (memq window-system '(mac ns x))
           (exec-path-from-shell-initialize))))
   #+end_src

   #+RESULTS:
   : t

** set line number
   #+BEGIN_SRC emacs-lisp
     (use-package nlinum
       :ensure t
       :config
       (progn
	 (global-nlinum-mode t)
	 ;; Preset `nlinum-format' for minimum width.
	 (defun my-nlinum-mode-hook ()
	   (when nlinum-mode
	     (setq-local nlinum-format
			 (concat "%" (number-to-string
				      ;; Guesstimate number of buffer lines.
				      (ceiling (log (max 1 (/ (buffer-size) 80)) 10)))
				 "d"))))
	 (add-hook 'nlinum-mode-hook #'my-nlinum-mode-hook)

	 ;; [[https://www.emacswiki.org/emacs/LineNumbers][solve bug with emacs daemon mode]]
	 (defun initialize-nlinum (&optional frame)
	   (require 'nlinum)
	   (add-hook 'prog-mode-hook 'nlinum-mode))
	 (when (daemonp)
	   (add-hook 'window-setup-hook 'initialize-nlinum)
	   (defadvice make-frame (around toggle-nlinum-mode compile activate)
	     (nlinum-mode -1) ad-do-it (nlinum-mode 1)))))
   #+END_SRC

   #+RESULTS:
   : t

** use y-or-n 
   #+begin_src emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)

   #+end_src

   #+RESULTS:
   : y-or-n-p

** set adaptive-wrap
   #+BEGIN_SRC emacs-lisp
     (use-package adaptive-wrap
       :ensure t
       :config
       (progn
	 ;; (setq-default adaptive-wrap-extra-indent 2)
	 (add-hook 'visual-line-mode-hook #'adaptive-wrap-prefix-mode)
	 (global-visual-line-mode 1)))
   #+END_SRC

   #+RESULTS:
   : t

** change the cursor type and color
   #+begin_src emacs-lisp
     ;;(setq-default cursor-type '(hbar . 2))
     (setq-default cursor-type '(bar . 2))
   #+end_src

   #+RESULTS:


** highlight current line
   #+begin_src emacs-lisp
     (global-hl-line-mode +1)
   #+end_src 

   #+RESULTS:
   : t

** use indent-guide
   #+begin_src emacs-lisp
     (use-package indent-guide
       :ensure t
       :config
       (progn
         (indent-guide-global-mode)))
   #+end_src 

   #+RESULTS:
   : t

** highlight-indentation
   #+BEGIN_SRC emacs-lisp
     (use-package highlight-indentation
       :ensure t
       :config
       (progn
         (setq highlight-indentation-blank-lines t)
         (add-hook 'yaml-mode-hook #'highlight-indentation-mode)))
   #+END_SRC

   #+RESULTS:
   : t

** which-key
   #+begin_src emacs-lisp
     (use-package which-key
       :defer 2
       :ensure t
       :config (which-key-mode))
   #+end_src

** try
   #+begin_src emacs-lisp
     (use-package try
       :defer 2
       :ensure t)
   #+end_src

* Swiper/Ivy/Counsel
  Swiper gives us a really efficient incremental search with regular expressions and Ivy / Counsel replace a lot of ido or helms completion functionality
  #+begin_src emacs-lisp
    ;; it looks like counsel is a requirement for swiper
    (use-package counsel
      :defer 1
      :ensure t
      :bind
      (("M-y" . counsel-yank-pop)
       :map ivy-minibuffer-map
       ("M-y" . ivy-next-line)))

    (use-package ivy
      :defer 1
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "%d/%d ")
      (setq ivy-display-style 'fancy))


    (use-package swiper
      :defer 1
      :ensure try
      :bind (("C-s" . swiper)
	     ("C-r" . swiper)
	     ("C-c C-r" . ivy-resume)
	     ("M-x" . counsel-M-x)
	     ("C-x C-f" . counsel-find-file))
      :config
      (progn
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-display-style 'fancy)
	(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
  #+end_src
  
* Keep parentheses balanced
** Paredit
   #+begin_src emacs-lisp
     (use-package paredit
       :defer 1
       :ensure t
       :init
       (progn
         (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
         (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
         (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
         (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
         ;; (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
         (add-hook 'sly-mode-hook             #'enable-paredit-mode)
         (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
         (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
         (add-hook 'racket-mode-hook           #'enable-paredit-mode)

         ;; paredit with eldoc
         (require 'eldoc) ; if not already loaded
         (eldoc-add-command
          'paredit-backward-delete
          'paredit-close-round)

         ;; paredit with electric return
         (defvar electrify-return-match
           "[\]}\)\"]"
           "If this regexp matches the text after the cursor, do an \"electric\"
       return.")
         (defun electrify-return-if-match (arg)
           "If the text after the cursor matches `electrify-return-match' then
       open and indent an empty line between the cursor and the text.  Move the
       cursor to the new line."
           (interactive "P")
           (let ((case-fold-search nil))
             (if (looking-at electrify-return-match)
                 (save-excursion (newline-and-indent)))
             (newline arg)
             (indent-according-to-mode)))
         ;; Using local-set-key in a mode-hook is a better idea.
         (global-set-key (kbd "RET") 'electrify-return-if-match)))
   #+end_src
** complements to paredit
   #+begin_src emacs-lisp
     ;; Show matching arenthesis
     (show-paren-mode 1)
     (setq show-paren-delay 0)

     (require 'paren)
     (set-face-background 'show-paren-match (face-background 'default))
   #+end_src

   #+RESULTS:


** smartparens
   [[https://github.com/Fuco1/smartparens][smartparens]] is an excellent (newer) alternative to paredit. Many Clojure hackers have adopted it recently and you might want to give it a try as well.
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :ensure t
       :config
       (progn
	 (add-hook 'js-mode-hook #'smartparens-mode)
	 (add-hook 'c-mode-hook #'smartparens-mode)
	 (add-hook 'c++-mode-hook #'smartparens-mode)))


   #+END_SRC

   #+RESULTS:
   : t   

* Helm
  #+BEGIN_SRC emacs-lisp
    (use-package helm
      :ensure t
      :config
      (progn
	;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
	;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
	;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
	(global-set-key (kbd "C-c h") 'helm-command-prefix)
	(global-unset-key (kbd "C-x c"))

	;; C-x C-f runs the command counsel-find-file
	(global-unset-key (kbd "C-x C-f"))
	(global-set-key (kbd "C-x C-f") #'helm-find-files)

	(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
	(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
	(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

	(when (executable-find "curl")
	  (setq helm-google-suggest-use-curl-p t))

	(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
	      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
	      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
	      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
	      helm-ff-file-name-history-use-recentf t
	      helm-echo-input-in-header-line t

	      ;; optional fuzzy matching for helm-M-x
	      helm-M-x-fuzzy-match t
	      helm-buffers-fuzzy-matching t
	      helm-recentf-fuzzy-match t

	      ;; TOOD: helm-semantic has not syntax coloring! How can I fix that?
	      helm-semantic-fuzzy-match t
	      helm-imenu-fuzzy-match t)

	(defun spacemacs//helm-hide-minibuffer-maybe ()
	  "Hide minibuffer in Helm session if we use the header line as input field."
	  (when (with-helm-buffer helm-echo-input-in-header-line)
	    (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
	      (overlay-put ov 'window (selected-window))
	      (overlay-put ov 'face
			   (let ((bg-color (face-background 'default nil)))
			     `(:background ,bg-color :foreground ,bg-color)))
	      (setq-local cursor-type nil))))


	(add-hook 'helm-minibuffer-set-up-hook
		  'spacemacs//helm-hide-minibuffer-maybe)

	(setq helm-autoresize-max-height 0)
	(setq helm-autoresize-min-height 20)
	(helm-autoresize-mode 1)
	(helm-mode 1)))
  #+END_SRC

  #+RESULTS:
  : t
* Projectile
  #+begin_src emacs-lisp
    (use-package projectile
      :ensure t
      :bind ("C-c p" . projectile-command-map)
      :config
      (progn
	(projectile-global-mode)
	(setq projectile-completion-system 'helm)

	(use-package helm-projectile
	  :ensure t
	  :config
	  (helm-projectile-on))))
  #+end_src

  #+RESULTS:
  : projectile-command-map

* Company
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :defer t
      :ensure t
      :config
      (progn
	(setq completion-ignore-case t)
	(setq company-dabbrev-downcase 0)
	(setq company-idle-delay 0.01)

	;; Show suggestions after entering one character.
	(setq company-minimum-prefix-length 1)

	;; wrap around to the top of the list again
	(setq company-selection-wrap-around t)

	(add-hook 'after-init-hook 'global-company-mode)
	(define-key company-active-map [tab] 'company-complete-selection)
	(define-key company-active-map (kbd "<tab>") 'company-complete-selection)


	;; set default `company-backends'
	(setq company-backends '((company-files          ; files & directory
				  company-keywords       ; keywords
				  company-capf
				  company-yasnippet)
				 (company-abbrev company-dabbrev)))

	;; (set-company-backends 'python-mode-hook '(company-anaconda company-jedi) "end")
	(defmacro hook-company-backends (hook-name mode-names &optional at)
	  "hook-name: 'c-mode-hook, mode-name: '(company-ycmd)"
	  `(add-hook ,hook-name #'(lambda ()
				    (progn
				      (let ((p (or ,at "front")))
					(set (make-local-variable 'company-backends)
					     (cond 
					      ((string-equal p "end")
					       (mapc #'(lambda (n)
							 (append (car company-backends) (list n)))
						     ,mode-names))
					      (t (cons ,mode-names (car company-backends))))))))))))
  #+END_SRC

  #+RESULTS:
  : t

* Rainbow-delimiters
  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
      :ensure t
      :config
      (progn
        ;; (add-hook 'lisp-mode-hook #'rainbow-delimiters-mode)
        (add-hook 'sly-mode-hook #'rainbow-delimiters-mode)
        (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)))
  #+END_SRC

  #+RESULTS:
  : t

* Ace-window
  #+begin_src emacs-lisp
    (use-package ace-window
      :defer 2
      :ensure t
      :init
      :config
      (progn
	(setq aw-scope 'frame)
	(global-set-key (kbd "C-x O") 'other-frame)
	(global-set-key [remap other-window] 'ace-window)
	(custom-set-faces
	 '(aw-leading-char-face
	   ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
  #+end_src

  #+RESULTS:
  : t

* Set emacs theme
  #+begin_src emacs-lisp
    ;; leuven-theme
    ;; gruvbox-theme
    ;; material-theme
    ;; flucui-themes
    (use-package solarized-theme
      :ensure t
      :config
      (progn
	(load-theme 'solarized-dark t)
	;; highlight matched parenthesis
	;; (set-face-foreground 'show-paren-match "red")
	(set-face-attribute 'show-paren-match nil :weight 'extra-bold)))

  #+end_src

  #+RESULTS:
  : t

* Org mode enhancement
** common settings
   #+BEGIN_SRC emacs-lisp
     (use-package org-plus-contrib
       :ensure t
       :config
       (progn
	 (require 'org-eldoc)
	 (require 'org-tempo)))

     (add-hook 'org-mode-hook #'(lambda ()
				  (progn
				    (defun my-org-confirm-babel-evaluate (lang body)
				      (not (member lang '("emacs-lisp" "lisp"))))
				    (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
				    ;; (local-set-key (kbd "<f9>") #'org-global-cycle)
				    ;; (local-set-key (kbd "<f6>") #'org-toggle-inline-images)
				    )))

     ;; To bind a key in a mode, you need to wait for the mode to be loaded before defining the key.
     (eval-after-load 'org
       #'(lambda ()
	   (define-key org-mode-map [f9] #'org-global-cycle)
	   (define-key org-mode-map [f6] #'org-toggle-inline-images)))
   #+END_SRC

   #+RESULTS:
   : org-global-cycle


** make code-block could be executed in org-mode
   If you find Org-Mode Evaluation of code is disabled, do:
   =find ~/.emacs.d/elpa/org* -name "*elc" -delete=

   #+begin_src emacs-lisp
     ;; evaluation use sly instead of using slime, need to use org-plus-contrib
     (setq org-babel-lisp-eval-fn #'sly-eval)

     (require 'org-tempo)
     (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
     (add-to-list 'org-structure-template-alist '("lisp" . "src lisp"))
     (add-to-list 'org-structure-template-alist '("sh" . "src sh"))

     (cond
      ((string-equal system-type "darwin")
       (progn
	 (org-babel-do-load-languages
	  'org-babel-load-languages
	  '((shell . t)
	    (lisp . t)
	    (C . t)))))
      ;; the shell configuration for Linux could either be sh or shell 
      ;; it is not same in different Linux system.
      ((string-equal system-type "gnu/linux")
       (progn
	 (org-babel-do-load-languages
	  'org-babel-load-languages
	  '((C . t)
	    (lisp . t)
	    (sh . t)))))
      ((string-equal system-type "windows-nt")
       (progn
	 (org-babel-do-load-languages
	  'org-babel-load-languages
	  '((shell . t)
	    (lisp . t)
	    (C . t))))))



   #+end_src
   
   #+RESULTS:


** htmlize --- convert buffer text and decorations to HTML
   #+BEGIN_SRC emacs-lisp
     (use-package htmlize
       :defer 2
       :ensure t)
   #+END_SRC

   #+RESULTS:
   : t
   m
* Treemacs
  #+begin_src emacs-lisp
    (use-package treemacs
      :defer t
      :ensure t
      :defer t
      :init
      (progn
	(use-package lv
	  :ensure t)
	(use-package hydra
	  :ensure t)
	(with-eval-after-load 'winum
	  (define-key winum-keymap (kbd "M-0") #'treemacs-select-window)))
      :config
      (progn
	;; (pcase (cons (not (null (executable-find "git")))
	;;              (not (null (executable-find "python3"))))
	;;   (`(t . t)
	;;    (treemacs-git-mode 'deferred))
	;;   (`(t . _)
	;;    (treemacs-git-mode 'simple)))
	(setq treemacs-collapse-dirs              (if (executable-find "python") 3 0)
	      treemacs-file-event-delay           5000
	      treemacs-follow-after-init          t
	      treemacs-follow-recenter-distance   0.1
	      treemacs-goto-tag-strategy          'refetch-index
	      treemacs-indentation                1
	      ;; indent guide
	      treemacs-indentation-string (propertize " | " 'face 'font-lock-comment-face)
	      ;; treemacs-indentation-string         "|"
	      treemacs-is-never-other-window      nil
	      treemacs-no-png-images              nil
	      treemacs-project-follow-cleanup     nil
	      treemacs-recenter-after-file-follow nil
	      treemacs-recenter-after-tag-follow  nil
	      treemacs-show-hidden-files          t
	      treemacs-silent-filewatch           nil
	      treemacs-silent-refresh             nil
	      treemacs-sorting                    'alphabetic-desc
	      treemacs-tag-follow-cleanup         t
	      treemacs-tag-follow-delay           1.5
	      treemacs-width                      40
	      treemacs-follow-mode                t
	      treemacs-filewatch-mode             t
	      treemacs-git-mode nil))
      :bind
      (:map global-map
	    ([f8]        . treemacs)
	    ("M-0"       . treemacs-select-window)
	    ("C-x t 1"   . treemacs-delete-other-windows)
	    ("C-x t t"   . treemacs)
	    ("C-x t B"   . treemacs-bookmark)
	    ("C-x t C-t" . treemacs-find-file)
	    ("C-x t M-t" . treemacs-find-tag)))

    (use-package treemacs-evil
      :defer t
      :after treemacs evil
      :ensure t)

    (use-package treemacs-projectile
      :defer t
      :after treemacs projectile
      :ensure t)

    (use-package treemacs-icons-dired
      :defer t
      :after treemacs dired
      :ensure t
      :config (treemacs-icons-dired-mode))


  #+end_src

  #+RESULTS:
* Yaml-mode
  #+begin_src emacs-lisp
    (use-package yaml-mode
      :mode "\\.yaml\\'"
      :ensure t
      :config
      (progn
	(add-hook 'yaml-mode-hook
		  (lambda ()
		    (define-key yaml-mode-map "\C-m" 'newline-and-indent)))))
  #+end_src

  #+RESULTS:
  : t


* Web mode
  - Auto opening, Auto completion, Auto expanders, code folding, Naviation
  - Configure to support snippets, such as HTML/Django
  - Context aware processing
  #+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :ensure t
      :config
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.vue?\\'" . web-mode))
      (setq web-mode-engines-alist
	    '(("django"    . "\\.html\\'")))
      (setq web-mode-ac-sources-alist
	    '(("css" . (ac-source-css-property))
	      ("vue" . (ac-source-words-in-buffer ac-source-abbrev))
	      ("html" . (ac-source-words-in-buffer ac-source-abbrev))))

      (setq web-mode-enable-auto-quoting t)
      (setq web-mode-enable-auto-closing t)

      (setq web-mode-markup-indent-offset 2)
      (setq web-mode-code-indent-offset 2)
      (setq web-mode-css-indent-offset 2)
  
      (setq web-mode-enable-auto-pairing t)
      (setq web-mode-enable-auto-expanding t)
      (setq web-mode-enable-css-colorization t))

  #+END_SRC
* JSON-mode
  Major mode for editing JSON files
  #+BEGIN_SRC emacs-lisp
    (use-package json-mode
      :mode "\\.json\\'"
      :ensure t)
  #+END_SRC

  #+RESULTS:

* Markdown 
  - sudo apt install pandoc
  #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode
      :ensure t
      :commands (markdown-mode gfm-mode)
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)
             ("\\.markdown\\'" . markdown-mode))
      :init (setq markdown-command "multimarkdown")
      :config
      (progn
        (setq markdown-command "/usr/bin/pandoc")))
  #+END_SRC

  #+RESULTS:

* Magit
  #+begin_src emacs-lisp
    (use-package magit
      :ensure t)
  #+end_src

  #+RESULTS:

* Programming
** Common features
*** Flycheck
    #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :defer 2
      :ensure t)

    (use-package flycheck-yamllint
      :defer t
      :ensure t
      :init
      (progn
	(eval-after-load 'flycheck
	  '(add-hook 'flycheck-mode-hook 'flycheck-yamllint-setup))))

    #+END_SRC

    #+RESULTS:
    | flycheck-yamllint-setup | flycheck-mode-set-explicitly |

*** Lsp
    [[https://github.com/emacs-lsp/lsp-mode][see lsp-mode]]
    #+begin_src emacs-lisp
      (use-package lsp-mode
	:ensure t
	:config
	(progn
	  (setq lsp-message-project-root-warning t)

	  ;; change nil to 't to enable logging of packets between emacs and the LS
	  ;; this was invaluable for debugging communication with the MS Python Language Server
	  ;; and comparing this with what vs.code is doing
	  (setq lsp-print-io nil)

	  (use-package lsp-ui
	    :ensure t
	    :config
	    (progn
	      (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
	      (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
	      (setq lsp-ui-sideline-ignore-duplicate t)
	      (setq lsp-ui-imenu-enable t)
	      (add-hook 'lsp-mode-hook 'lsp-ui-mode)))

	  (use-package company-lsp
	    :ensure t
	    :config
	    (progn
	      (setq company-lsp-cache-candidates nil)
	      (setq company-lsp-async t)
	      (setq company-lsp-enable-recompletion t)
	      ;; add company-lsp as backed
	      (append (car company-backends) (list 'company-lsp))))

	  (use-package helm-lsp :commands helm-lsp-workspace-symbol)
	  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)


	  (use-package dap-mode
	    :ensure t
	    :config
	    (progn
	      (dap-mode 1)
	      (dap-ui-mode 1)
	      (require 'dap-hydra)
	      (require 'dap-gdb-lldb)
	      (require 'dap-firefox)))))
	      #+end_src

    #+RESULTS:
    : t

*** Clang format
    !!! Do not forget to install clang-format: =sudo apt install clang-format=.
    #+begin_src emacs-lisp
      (use-package clang-format
	:ensure t
	:config
	(progn
	  (defun clang-format-buffer-smart ()
	    "Reformat buffer if .clang-format exists in the projectile root."
	    (when (f-exists? (expand-file-name ".clang-format" (projectile-project-root)))
	      (clang-format-buffer)))

	  (dolist (each-hook '(c-mode-hook c++-mode-hook js-mode-hook))
	    (add-hook each-hook #'(lambda ()
				    (add-hook 'before-save-hook #'clang-format-buffer-smart nil 'local))))))


    #+end_src

    #+RESULTS:
    : t

*** yasnippet
    #+begin_src emacs-lisp
      (use-package yasnippet
	:ensure t
	:diminish yas-minor-mode
	:config (yas-global-mode t))
    #+end_src

    #+RESULTS:
    : t

*** Aggressive-indent-mode
    #+BEGIN_SRC emacs-lisp
      (use-package aggressive-indent
	:ensure t
	:config
	(progn
	  ;; active it for specific mode
	  (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
	  (add-hook 'scheme-mode-hook #'aggressive-indent-mode)
	  ;; deactive it for specific mode
	  (add-to-list 'aggressive-indent-excluded-modes 'html-mode)))
    #+END_SRC

    #+RESULTS:
    : t

*** expand-region
    #+begin_src emacs-lisp
      (use-package expand-region
	:ensure t
	:config
	(progn
	  (global-set-key (kbd "C-=") 'er/expand-region)
	  (global-set-key (kbd "C--") 'er/contract-region)))
    #+end_src

    #+RESULTS:
    : t

** Lisp programming configuration
*** Eldoc to show argument list
    #+begin_src emacs-lisp
      (use-package eldoc
	:defer t
	:ensure t
	:init
	:config
	(progn
	  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
	  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
	  (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
	  ;; highlight eldoc arguments in emacslisp
	  (defun eldoc-get-arg-index ()
	    (save-excursion
	      (let ((fn (eldoc-fnsym-in-current-sexp))
		    (i 0))
		(unless (memq (char-syntax (char-before)) '(32 39)) ; ? , ?'
		  (condition-case err
		      (backward-sexp)             ;for safety
		    (error 1)))
		(condition-case err
		    (while (not (equal fn (eldoc-current-symbol)))
		      (setq i (1+ i))
		      (backward-sexp))
		  (error 1))
		(max 0 i))))

	  (defun eldoc-highlight-nth-arg (doc n)
	    (cond ((null doc) "")
		  ((<= n 0) doc)
		  (t
		   (let ((i 0))
		     (mapconcat
		      (lambda (arg)
			(if (member arg '("&optional" "&rest"))
			    arg
			  (prog2
			      (if (= i n)
				  (put-text-property 0 (length arg) 'face 'underline arg))
			      arg
			    (setq i (1+ i)))))
		      (split-string doc) " ")))))

	  (defadvice eldoc-get-fnsym-args-string (around highlight activate)
	    ""
	    (setq ad-return-value (eldoc-highlight-nth-arg ad-do-it
							   (eldoc-get-arg-index))))))
    #+end_src

    #+RESULTS:
    : t

*** Common-lisp
    #+begin_src emacs-lisp
      (use-package sly
	:ensure t
	:config
	(progn
	  (setq sly-lisp-implementations
		'((sbcl ("/usr/local/bin/sbcl") :coding-system utf-8-unix)
		  ))
	  ;; (setq inferior-lisp-program "clisp"
	  ;; 	  exec-path (append exec-path
	  ;;                         '("/usr/local/bin")))
	  ))

    #+end_src

    #+RESULTS:
    : t

*** Racket
    #+begin_src emacs-lisp
      (use-package racket-mode
	:mode "\\.racket\\'"
	:ensure t
	:config
	(progn
	  (if (string-equal system-type "windows-nt")
	      (setq racket-program "c:/Program Files/Racket/Racket.exe")
	    (setq racket-program "/Applications/Racket_v7.0/bin/racket"))
	  (add-hook 'racket-mode-hook
		    (lambda ()
		      (define-key racket-mode-map (kbd "C-c r") 'racket-run)))
	  (setq tab-always-indent 'complete)
	  (add-hook 'racket-mode-hook      #'racket-unicode-input-method-enable)
	  (add-hook 'racket-repl-mode-hook #'racket-unicode-input-method-enable)

	  ;; setup file ending in ".scheme" to open in racket-mode 
	  (add-to-list 'auto-mode-alist '("\\.scheme\\'" . racket-mode))))
    #+end_src

    #+RESULTS:
    : t

*** Scheme
    #+begin_src emacs-lisp
      (use-package geiser
	:ensure t
	:config
	(progn
	  (add-hook 'scheme-mode-hook #'geiser-mode--maybe-activate)
	  (setq geiser-active-implementations '(guile))
	  (setq geiser-mode-start-repl-p t)))

    #+end_src
** Scala programming
*** ensime
    #+begin_src emacs-lisp
      (use-package ensime
	:mode "\\.scala\\'"
	:init 
	(if (string-equal system-type "windows-nt")
	    (progn
	      (setq exec-path (append exec-path '("c:/Program Files (x86)/scala/bin")))
	      (setq exec-path (append exec-path '("c:/Program Files (x86)/sbt/bin"))))
	  (setq exec-path (append exec-path '("/usr/local/bin"))))
	:ensure t
	:config
	(progn
	  ;; (add-hook 'scala-mode-hook 'ensime-scala-mode-hook)
	  (add-hook 'scala-mode-hook 'ensime-mode)))
    #+end_src

    #+RESULTS:
    : t
    
** Python development
*** with lsp 
    - References
      - [[https://vxlabs.com/2018/11/19/configuring-emacs-lsp-mode-and-microsofts-visual-studio-code-python-language-server/][Configuring Emacs, lsp-mode and Microsoft's Visual Studio Code Python language server.]] (using)
    - Components
      - server: Microsoft Python Language Server
      - client: lsp-python-ms
      - installation
	- install [[https://dotnet.microsoft.com/download][dotnet-sdk]]
	  - [[https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current][installation on ubuntu18.04]]
	- clone and install [[https://github.com/Microsoft/python-language-server][python-language-server]]
    - Configuration with emacs
      #+begin_src emacs-lisp

	(use-package lsp-python-ms
	  :ensure t
	  :config
	  (progn
	    ;; for dev build of language server
	    (setq lsp-python-ms-dir
		  (expand-file-name "~/python-language-server/output/bin/Release/"))

	    (setq python-shell-interpreter "python3")
	    (add-hook 'python-mode-hook #'lsp)
	    (add-hook 'python-mode-hook #'smartparens-mode)))

      #+end_src

      #+RESULTS:
      : t

    - An old on base anaconda (as backup)
      #+begin_src emacs-lisp
	;; (use-package python-mode
	;;   :ensure t
	;;   :config
	;;   (progn
	;;     (setq python-shell-interpreter "python3")
	;;     (add-hook 'python-mode-hook #'lsp)
	;;     (add-hook 'python-mode-hook (lambda ()
	;; 				  (setq lsp-enable-eldoc nil)))
	;;     (use-package anaconda-mode
	;;       :ensure t
	;;       :config
	;;       (progn
	;; 	(add-hook 'python-mode-hook #'anaconda-mode)
	;; 	(add-hook 'python-mode-hook #'anaconda-eldoc-mode)
	;; 	(use-package company-anaconda
	;; 	  :ensure t
	;; 	  :config
	;; 	  (hook-company-backends 'python-mode-hook '(company-anaconda)))))))
      #+end_src




   
*** Debugging
    Debugg using pdb
    #+BEGIN_SRC python
      # import ipd
      # ipdb.set_trace ()
    #+END_SRC

*** Test Integration
    Configure your test Runner
    M-x elpy-set-test-runner
    C-c C-t  ;; runs test/ all tests


** Clojure programming
*** CIDER
    It is the Clojure(Script) Interactive Development Environment.
    #+BEGIN_SRC emacs-lisp
      (use-package cider
	:ensure t
	:config
	(progn
          (add-hook 'cider-repl-mode-hook #'enable-paredit-mode)
          (add-hook 'cider-repl-mode-hook #'subword-mode)
          (add-hook 'cider-repl-mode-hook #'rainbow-delimiters-mode)
          (use-package helm-cider
            :ensure t
            :config
            (progn
              (add-hook 'cider-repl-mode-hook #'helm-cider-mode)))))
    #+END_SRC

    #+RESULTS:
    : t
   
*** Clojure-mode
    #+BEGIN_SRC emacs-lisp
      (use-package clojure-mode
	:ensure t
	:config
	(progn
          (setq clojure-align-forms-automatically t)
          ;; make moving between characters faster
          (add-hook 'clojure-mode-hook #'subword-mode)
          ;; use paredit or smartparens 
          (add-hook 'clojure-mode-hook #'enable-paredit-mode)
          (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
          (add-hook 'clojure-mode-hook #'aggressive-indent-mode)))

    #+END_SRC

    #+RESULTS:
    : t

   
*** Userful key-bindings in Clojure programming
    - C-c C-d C-d will display documentation for the symbol under point, which can be a huge time-saver.
    - M-. will navigate to the source code for the symbol under point
    - M-, will return you to your original buffer and position
    - C-c C-d C-a lets you search for arbitrary text across function names and documentation
    - For paredit
      - M-( Surround expression after point in parentheses (paredit-wrap-round).
      - C-<left or right arrow>, surp or barf
      - C-M-f, C-M-b Move to the opening/closing parenthesis.

** C/C++ programming
   - [[http://syamajala.github.io/c-ide.html][Emacs as C++ IDE]] (star one)
   - [[http://martinsosic.com/development/emacs/2017/12/09/emacs-cpp-ide.html#configuration][Emacs as a C++ IDE]] (start one)
   - [[https://oremacs.com/2017/03/28/emacs-cpp-ide/][Using Emacs as a C++ IDE]]
   - Other options
     - [[https://nilsdeppe.com/posts/emacs-c++-ide2][using YouCompleteMe]]
     - [[https://onze.io/emacs/c++/2017/03/16/emacs-cpp.html][using ycmd]]
     - A blog to read
       https://ddavis.io/

   - Dependencies
     - =sudo apt install cmake=
     - =sudo apt install libclang-dev=

*** CMakeLists
    #+begin_src emacs-lisp
      (use-package cmake-mode
	:ensure t
	:config
	(progn
	  (add-hook 'cmake-mode-hook #'(lambda ()
					 (smartparens-mode +1)))))
    #+end_src

    #+RESULTS:
    : t

*** install ycmd 
    - on macOS:
      - =xcode-select --install=
      - =homebrew install cmake=
    - on ubuntu:
      - =sudo apt install build-essential cmake python-dev=
      - =sudo apt install ycmd=


*** C and C++ mode hook
    #+begin_src emacs-lisp
      (hook-company-backends 'c-mode-hook '(company-rtags company-irony company-irony-c-headers))
      (hook-company-backends 'c++-mode-hook '(company-rtags company-irony company-irony-c-headers))
    #+end_src

    #+RESULTS:
    | add-hook | c++-mode-hook | (function (lambda nil (progn (set (make-local-variable (quote company-backends)) (cond ((string-equal at end) (mapc (function (lambda (n) (append (car company-backends) (list n)))) (company-rtags company-irony company-irony-c-headers))) (t (cons (company-rtags company-irony company-irony-c-headers) (car company-backends)))))))) |




** Javascript
*** with lsp
    - =sudo npm i -g javascript-typescript-langserver=
    - emacs configuration
      #+begin_src emacs-lisp
	(add-hook 'js-mode-hook #'lsp)
      #+end_src

** Java programming
   [[http://www.goldsborough.me/emacs,/java/2016/02/24/22-54-16-setting_up_emacs_for_java_development/][blog shows how to setup emacs for java development]]

* References
** Good examples
   - [[https://ladicle.com/post/config/][Ladicle's Emacs Configuration]]
